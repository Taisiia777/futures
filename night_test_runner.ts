#!/usr/bin/env npx ts-node
import fs from 'fs';
import path from 'path';
import { config } from './src/config/config';
import { ExchangeService } from './src/services/exchangeService';
import { MockExchangeService } from './src/services/mockExchangeService';
import { UltimatePumpHunter } from './src/core/ultimatePumpHunter';
import logger from './src/utils/logger';

/**
 * –ù–û–ß–ù–û–ô –¢–ï–°–¢ ULTIMATE PUMP HUNTER
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç—á–µ—Ç–æ–º
 */

interface NightTestResult {
    startTime: string;
    endTime: string;
    duration: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
    initialCapital: number;
    finalCapital: number;
    totalReturn: number;
    totalTrades: number;
    winningTrades: number;
    losingTrades: number;
    winRate: number;
    profitFactor: number;
    maxDrawdown: number;
    avgTradeReturn: number;
    avgWinSize: number;
    avgLossSize: number;
    bestTrade: number;
    worstTrade: number;
    consecutiveWins: number;
    consecutiveLosses: number;
    dailyReturns: number[];
    hourlyPnL: { hour: number; pnl: number }[];
    symbolPerformance: { symbol: string; trades: number; pnl: number }[];
    compoundGrowthActivated: boolean;
    conservativeModeActivated: boolean;
    partialProfitsTaken: number;
    superAggressiveTrades: number;
}

class NightTestRunner {
    private strategy: UltimatePumpHunter;
    private startTime: Date;
    private testResults: NightTestResult;
    private exchangeService: ExchangeService | MockExchangeService;
    
    constructor() {
        // –°–æ–∑–¥–∞–µ–º –æ–±–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        this.exchangeService = config.trading.testMode 
            ? new MockExchangeService(config.binance.apiKey, config.binance.apiSecret)
            : new ExchangeService(config.binance.apiKey, config.binance.apiSecret);
            
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        this.strategy = new UltimatePumpHunter(
            config.trading.initialCapital,
            this.exchangeService
        );
        
        this.startTime = new Date();
        this.testResults = this.initializeResults();
        
        logger.info('üåô –ù–û–ß–ù–û–ô –¢–ï–°–¢ ULTIMATE PUMP HUNTER –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù');
        logger.info(`üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${config.trading.initialCapital} USDT`);
        logger.info(`üéØ –†–µ–∂–∏–º: ${config.trading.testMode ? '–í–ò–†–¢–£–ê–õ–¨–ù–´–ô' : '–ë–û–ï–í–û–ô'}`);
    }
    
    private initializeResults(): NightTestResult {
        return {
            startTime: this.startTime.toISOString(),
            endTime: '',
            duration: 0,
            initialCapital: config.trading.initialCapital,
            finalCapital: config.trading.initialCapital,
            totalReturn: 0,
            totalTrades: 0,
            winningTrades: 0,
            losingTrades: 0,
            winRate: 0,
            profitFactor: 0,
            maxDrawdown: 0,
            avgTradeReturn: 0,
            avgWinSize: 0,
            avgLossSize: 0,
            bestTrade: 0,
            worstTrade: 0,
            consecutiveWins: 0,
            consecutiveLosses: 0,
            dailyReturns: [],
            hourlyPnL: [],
            symbolPerformance: [],
            compoundGrowthActivated: false,
            conservativeModeActivated: false,
            partialProfitsTaken: 0,
            superAggressiveTrades: 0
        };
    }
    
    async startNightTest(durationHours: number = 8): Promise<void> {
        logger.info(`üöÄ –ó–ê–ü–£–°–ö –ù–û–ß–ù–û–ì–û –¢–ï–°–¢–ê –ù–ê ${durationHours} –ß–ê–°–û–í`);
        
        const endTime = new Date(Date.now() + durationHours * 60 * 60 * 1000);
        let hourlyStats: { hour: number; pnl: number }[] = [];
        let lastHourRecorded = new Date().getHours();
        
        // –ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        const tradingLoop = async () => {
            try {
                await this.strategy.executeUltimateHunt();
                this.updateRealTimeStats();
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                const currentHour = new Date().getHours();
                if (currentHour !== lastHourRecorded) {
                    const stats = this.strategy.getUltimateStats();
                    hourlyStats.push({
                        hour: currentHour,
                        pnl: stats.equity - this.testResults.initialCapital
                    });
                    lastHourRecorded = currentHour;
                }
                
            } catch (error: any) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: ${error.message}`);
            }
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫–∞–Ω)
        const tradingInterval = setInterval(tradingLoop, 3000);
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        const statsInterval = setInterval(() => {
            this.logExtendedStats();
        }, 60000);
        
        // –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        const quickStatsInterval = setInterval(() => {
            this.logQuickStats();
        }, 10000);
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        await new Promise<void>((resolve) => {
            const checkEnd = () => {
                if (Date.now() >= endTime.getTime()) {
                    clearInterval(tradingInterval);
                    clearInterval(statsInterval);
                    clearInterval(quickStatsInterval);
                    resolve();
                }
            };
            setInterval(checkEnd, 1000);
        });
        
        // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.testResults.hourlyPnL = hourlyStats;
        await this.finalizeResults();
        await this.generateDetailedReport();
        
        logger.info('üèÅ –ù–û–ß–ù–û–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù! –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...');
    }
    
    private updateRealTimeStats(): void {
        const stats = this.strategy.getUltimateStats();
        
        this.testResults.finalCapital = stats.equity;
        this.testResults.totalReturn = stats.totalReturn;
        this.testResults.totalTrades = stats.totalTrades;
        this.testResults.winningTrades = Math.round(stats.totalTrades * stats.winRate);
        this.testResults.losingTrades = stats.totalTrades - this.testResults.winningTrades;
        this.testResults.winRate = stats.winRate;
        this.testResults.maxDrawdown = stats.currentDrawdown;
        this.testResults.consecutiveWins = stats.consecutiveWins;
        this.testResults.consecutiveLosses = stats.consecutiveLosses;
        this.testResults.compoundGrowthActivated = stats.compoundActive;
        this.testResults.conservativeModeActivated = stats.isConservativeMode;
    }
    
    private logQuickStats(): void {
        const stats = this.strategy.getUltimateStats();
        const runtime = Math.round((Date.now() - this.startTime.getTime()) / 60000);
        
        logger.info(`‚ö° [${runtime}–º] $${stats.equity.toFixed(2)} | ${stats.totalReturn.toFixed(1)}% | ${stats.totalTrades} —Å–¥–µ–ª–æ–∫ | WR: ${(stats.winRate * 100).toFixed(1)}%`);
    }
    
    private logExtendedStats(): void {
        const stats = this.strategy.getUltimateStats();
        const runtime = Math.round((Date.now() - this.startTime.getTime()) / 60000);
        const winningTrades = Math.round(stats.totalTrades * stats.winRate);
        const losingTrades = stats.totalTrades - winningTrades;
        
        logger.info(`üìä === –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê [${runtime} –º–∏–Ω—É—Ç] ===`);
        logger.info(`üí∞ –ö–∞–ø–∏—Ç–∞–ª: ${stats.equity.toFixed(2)} USDT (—Ä–æ—Å—Ç: ${stats.totalReturn.toFixed(2)}%)`);
        logger.info(`üéØ –°–¥–µ–ª–∫–∏: ${stats.totalTrades} | –ü–æ–±–µ–¥: ${winningTrades} | –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${losingTrades}`);
        logger.info(`üìà WinRate: ${(stats.winRate * 100).toFixed(1)}% | –ü—Ä–æ—Å–∞–¥–∫–∞: ${stats.currentDrawdown.toFixed(1)}%`);
        logger.info(`üî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: ${stats.consecutiveWins} | –°–µ—Ä–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏–π: ${stats.consecutiveLosses}`);
        
        if (stats.compoundActive) {
            logger.info(`üìà –°–õ–û–ñ–ù–´–ô –ü–†–û–¶–ï–ù–¢ –ê–ö–¢–ò–í–ï–ù! –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏`);
        }
        
        if (stats.isConservativeMode) {
            logger.info(`üõ°Ô∏è –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú (–ø—Ä–æ—Å–∞–¥–∫–∞ ${stats.currentDrawdown.toFixed(1)}%)`);
        }
        
        if (stats.openPosition > 0) {
            logger.info(`‚ö° –ê–ö–¢–ò–í–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø`);
        }
        
        logger.info(`‚è±Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å–¥–µ–ª–∫–∞: ${Math.round(stats.nextTradeIn / 60000)} –º–∏–Ω—É—Ç`);
    }
    
    private async finalizeResults(): Promise<void> {
        const endTime = new Date();
        this.testResults.endTime = endTime.toISOString();
        this.testResults.duration = Math.round((endTime.getTime() - this.startTime.getTime()) / 60000);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if (this.testResults.totalTrades > 0) {
            this.testResults.avgTradeReturn = this.testResults.totalReturn / this.testResults.totalTrades;
            
            // –≠—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Ö –Ω—É–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
            this.testResults.profitFactor = this.testResults.winRate > 0 ? 
                (this.testResults.totalReturn * this.testResults.winRate) / 
                (Math.abs(this.testResults.totalReturn * (1 - this.testResults.winRate))) : 0;
        }
    }
    
    private async generateDetailedReport(): Promise<void> {
        const reportPath = path.join(process.cwd(), `night_test_report_${Date.now()}.md`);
        
        const report = `# üåô –ù–û–ß–ù–û–ô –¢–ï–°–¢ ULTIMATE PUMP HUNTER
        
## üìä –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´

- **–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**: ${this.testResults.startTime} ‚Üí ${this.testResults.endTime}
- **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: ${this.testResults.duration} –º–∏–Ω—É—Ç (${(this.testResults.duration / 60).toFixed(1)} —á–∞—Å–æ–≤)
- **–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª**: $${this.testResults.initialCapital}
- **–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª**: $${this.testResults.finalCapital.toFixed(2)}
- **–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å**: ${this.testResults.totalReturn.toFixed(2)}%
- **–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä —Ä–æ—Å—Ç–∞**: ${(this.testResults.finalCapital / this.testResults.initialCapital).toFixed(2)}x

## üéØ –¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

- **–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫**: ${this.testResults.totalTrades}
- **–í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫**: ${this.testResults.winningTrades}
- **–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫**: ${this.testResults.losingTrades}
- **WinRate**: ${(this.testResults.winRate * 100).toFixed(1)}%
- **Profit Factor**: ${this.testResults.profitFactor.toFixed(2)}
- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞**: ${this.testResults.maxDrawdown.toFixed(1)}%

## üî• –°–ï–†–ò–ò

- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥**: ${this.testResults.consecutiveWins}
- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏–π**: ${this.testResults.consecutiveLosses}

## üöÄ –ü–†–û–î–í–ò–ù–£–¢–´–ï –§–£–ù–ö–¶–ò–ò

- **–°–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**: ${this.testResults.compoundGrowthActivated ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}
- **–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**: ${this.testResults.conservativeModeActivated ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}
- **–ß–∞—Å—Ç–∏—á–Ω—ã–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏**: ${this.testResults.partialProfitsTaken}
- **–°—É–ø–µ—Ä-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏**: ${this.testResults.superAggressiveTrades}

## üí° –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò

${this.generatePerformanceAnalysis()}

## üéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï

${this.generateConclusion()}

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ${new Date().toLocaleString()}*
`;

        fs.writeFileSync(reportPath, report);
        logger.info(`üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    }
    
    private generatePerformanceAnalysis(): string {
        let analysis = '';
        
        if (this.testResults.winRate >= 0.85) {
            analysis += '‚úÖ **–û—Ç–ª–∏—á–Ω—ã–π WinRate** (‚â•85%) - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å\n';
        } else if (this.testResults.winRate >= 0.70) {
            analysis += '‚úÖ **–•–æ—Ä–æ—à–∏–π WinRate** (70-84%) - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n';
        } else {
            analysis += '‚ö†Ô∏è **–ù–∏–∑–∫–∏–π WinRate** (<70%) - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n';
        }
        
        if (this.testResults.totalReturn > 50) {
            analysis += 'üöÄ **–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å** (>50%) - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç!\n';
        } else if (this.testResults.totalReturn > 20) {
            analysis += 'üìà **–í—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å** (20-50%) - –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n';
        } else if (this.testResults.totalReturn > 0) {
            analysis += 'üìä **–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å** - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–∞\n';
        } else {
            analysis += 'üìâ **–£–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å** - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞\n';
        }
        
        if (this.testResults.maxDrawdown < 10) {
            analysis += 'üõ°Ô∏è **–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫** - –ø—Ä–æ—Å–∞–¥–∫–∞ –º–µ–Ω–µ–µ 10%\n';
        } else if (this.testResults.maxDrawdown < 20) {
            analysis += '‚öñÔ∏è **–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫** - –ø—Ä–æ—Å–∞–¥–∫–∞ 10-20%\n';
        } else {
            analysis += '‚ö†Ô∏è **–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫** - –ø—Ä–æ—Å–∞–¥–∫–∞ –±–æ–ª–µ–µ 20%\n';
        }
        
        return analysis;
    }
    
    private generateConclusion(): string {
        const isSuccessful = this.testResults.totalReturn > 0 && this.testResults.winRate >= 0.7;
        
        if (isSuccessful) {
            return `üéâ **–¢–ï–°–¢ –£–°–ü–ï–®–ï–ù!** –°—Ç—Ä–∞—Ç–µ–≥–∏—è ULTIMATE PUMP HUNTER –ø–æ–∫–∞–∑–∞–ª–∞ –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é ${this.testResults.totalReturn.toFixed(1)}% –∏ WinRate ${(this.testResults.winRate * 100).toFixed(1)}%. 

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:**
- –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏
- –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
- –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–∏–±—ã–ª—è—Ö`;
        } else {
            return `‚ö†Ô∏è **–¢–ï–°–¢ –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò** –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö.

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:**
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
- –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω–∏ Take Profit –∏ Stop Loss
- –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
- –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö`;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
async function runNightTest() {
    const testRunner = new NightTestRunner();
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
    const testDurationHours = process.argv[2] ? parseFloat(process.argv[2]) : 8; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 —á–∞—Å–æ–≤
    
    logger.info(`üåô –ó–∞–ø—É—Å–∫ –Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–∞ ${testDurationHours} —á–∞—Å–æ–≤...`);
    
    try {
        await testRunner.startNightTest(testDurationHours);
        logger.info('‚úÖ –ù–æ—á–Ω–æ–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    } catch (error: any) {
        logger.error(`üí• –û—à–∏–±–∫–∞ –Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ${error.message}`);
        process.exit(1);
    }
}

// Graceful shutdown
process.on('SIGINT', () => {
    logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runNightTest();
