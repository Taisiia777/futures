"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UltimatePumpHunter = void 0;
const logger_1 = __importDefault(require("../utils/logger"));
class UltimatePumpHunter {
    constructor(initialEquity, exchangeService) {
        // –ë–û–ï–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –°–ï–õ–ï–ö–¢–ò–í–ù–û–°–¢–¨
        this.LEVERAGE = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ
        this.POSITION_SIZE = 0.08; // 8% –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
        this.MIN_CONFIDENCE = 0.85; // 85% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        this.TARGET_PROFIT = 0.05; // 5% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (500% ROI)
        this.STOP_LOSS = 0.015; // 1.5% —Å—Ç–æ–ø-–ª–æ—Å—Å (150% –ø–æ—Ç–µ—Ä—è)
        this.MAX_POSITION_TIME = 3 * 60 * 1000; // 3 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
        this.MIN_PUMP_SIZE = 0.025; // 2.5% –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–º–ø
        this.COOLDOWN_TIME = 45 * 60 * 1000; // 45 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        this.openPosition = null;
        this.lastTradeTime = 0;
        this.dailyStats = { trades: 0, wins: 0, totalPnL: 0 };
        this.equity = initialEquity;
        this.exchangeService = exchangeService;
        logger_1.default.info(`üéØ ULTIMATE PUMP HUNTER –ó–ê–ü–£–©–ï–ù:`);
        logger_1.default.info(`üí∞ –ö–∞–ø–∏—Ç–∞–ª: ${initialEquity} USDT`);
        logger_1.default.info(`‚ö° –ü–ª–µ—á–æ: ${this.LEVERAGE}x | –ü–æ–∑–∏—Ü–∏—è: ${this.POSITION_SIZE * 100}%`);
        logger_1.default.info(`üéØ Target: ${this.TARGET_PROFIT * 100}% | Stop: ${this.STOP_LOSS * 100}%`);
        logger_1.default.info(`‚è±Ô∏è –ö—É–ª–¥–∞—É–Ω: ${this.COOLDOWN_TIME / 60000} –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏`);
    }
    // –ì–õ–ê–í–ù–´–ô –¢–û–†–ì–û–í–´–ô –¶–ò–ö–õ - –†–ê–ë–û–¢–ê –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
    async executeUltimateHunt() {
        try {
            // –£–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
            if (this.openPosition) {
                await this.manageElitePosition();
                return;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if (Date.now() - this.lastTradeTime < this.COOLDOWN_TIME) {
                return;
            }
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∏—â–µ–º –ø–∞–º–ø—ã
            const topSymbols = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'BNBUSDT', 'ADAUSDT', 'DOTUSDT', 'LINKUSDT', 'LTCUSDT'];
            const bestSignal = await this.findUltimateSignal(topSymbols);
            if (bestSignal && bestSignal.signal.confidence >= this.MIN_CONFIDENCE) {
                await this.executeEliteTrade(bestSignal);
            }
        }
        catch (error) {
            logger_1.default.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ULTIMATE HUNT: ${error.message}`);
        }
    }
    async findUltimateSignal(symbols) {
        let bestSignal = null;
        let maxConfidence = 0;
        for (const symbol of symbols) {
            try {
                const signal = await this.analyzeUltimateSignal(symbol);
                if (signal.confidence > maxConfidence && signal.confidence >= this.MIN_CONFIDENCE) {
                    maxConfidence = signal.confidence;
                    bestSignal = { symbol, signal };
                }
            }
            catch (error) {
                logger_1.default.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${symbol}: ${error.message}`);
            }
        }
        return bestSignal;
    }
    async analyzeUltimateSignal(symbol) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç (1m –∏–Ω—Ç–µ—Ä–≤–∞–ª)
            const klines = await this.exchangeService.getKlines(symbol, '1m', 30);
            if (klines.length < 20) {
                return { strength: 0, confidence: 0, direction: 'long', expectedMove: 0, timeframe: 0 };
            }
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–≤–µ—á–µ–π vs –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 6
            const recent = klines.slice(-6);
            const baseline = klines.slice(-12, -6);
            // –¶–µ–Ω–∞ –∏ –æ–±—ä–µ–º
            const recentAvgPrice = recent.reduce((sum, k) => sum + parseFloat(k.close), 0) / recent.length;
            const baselineAvgPrice = baseline.reduce((sum, k) => sum + parseFloat(k.close), 0) / baseline.length;
            const priceMove = (recentAvgPrice - baselineAvgPrice) / baselineAvgPrice;
            const recentAvgVolume = recent.reduce((sum, k) => sum + parseFloat(k.volume), 0) / recent.length;
            const baselineAvgVolume = baseline.reduce((sum, k) => sum + parseFloat(k.volume), 0) / baseline.length;
            const volumeSpike = recentAvgVolume / baselineAvgVolume;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
            let consecutiveMoves = 0;
            const direction = priceMove > 0 ? 1 : -1;
            for (let i = 1; i < recent.length; i++) {
                const move = (parseFloat(recent[i].close) - parseFloat(recent[i - 1].close)) / parseFloat(recent[i - 1].close);
                if ((move > 0 && direction > 0) || (move < 0 && direction < 0)) {
                    consecutiveMoves++;
                }
            }
            // –†–ê–°–ß–ï–¢ CONFIDENCE - –ñ–ï–°–¢–ö–ò–ï –ö–†–ò–¢–ï–†–ò–ò
            let confidence = 0;
            const strength = Math.abs(priceMove);
            // –£—Å–ª–æ–≤–∏–µ 1: –°–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            if (strength >= this.MIN_PUMP_SIZE)
                confidence += 0.35;
            // –£—Å–ª–æ–≤–∏–µ 2: –û–±—ä–µ–º–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫
            if (volumeSpike >= 5.0)
                confidence += 0.3;
            else if (volumeSpike >= 3.0)
                confidence += 0.2;
            // –£—Å–ª–æ–≤–∏–µ 3: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if (consecutiveMoves >= 4)
                confidence += 0.25;
            else if (consecutiveMoves >= 3)
                confidence += 0.15;
            // –£—Å–ª–æ–≤–∏–µ 4: –ò–º–ø—É–ª—å—Å –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç
            const recentMomentum = recent.slice(-3).reduce((sum, k, i) => {
                if (i === 0)
                    return sum;
                return sum + Math.abs((parseFloat(k.close) - parseFloat(recent[i - 1].close)) / parseFloat(recent[i - 1].close));
            }, 0);
            if (recentMomentum > 0.015)
                confidence += 0.1;
            return {
                strength,
                confidence: Math.min(confidence, 1.0),
                direction: priceMove > 0 ? 'long' : 'short',
                expectedMove: strength * 1.5,
                timeframe: 180 // 3 –º–∏–Ω—É—Ç—ã
            };
        }
        catch (error) {
            logger_1.default.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è ${symbol}: ${error.message}`);
            return { strength: 0, confidence: 0, direction: 'long', expectedMove: 0, timeframe: 0 };
        }
    }
    async executeEliteTrade(best) {
        try {
            const { symbol, signal } = best;
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            const currentPrice = await this.exchangeService.getCurrentPrice(symbol);
            // –†–ê–ó–ú–ï–† –ü–û–ó–ò–¶–ò–ò —Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            const positionValue = this.equity * this.POSITION_SIZE;
            const leveragedValue = positionValue * this.LEVERAGE;
            const quantity = leveragedValue / currentPrice;
            // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï TP/SL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            const dynamicTP = this.TARGET_PROFIT * (1 + signal.strength * 2); // –ë–æ–ª—å—à–µ —Å–∏–ª–∞ = –±–æ–ª—å—à–µ —Ü–µ–ª—å
            const dynamicSL = this.STOP_LOSS * (2 - signal.confidence); // –ë–æ–ª—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ = –º–µ–Ω—å—à–µ —Å—Ç–æ–ø
            this.openPosition = {
                symbol,
                side: signal.direction,
                entryPrice: currentPrice,
                quantity,
                entryTime: Date.now(),
                targetProfit: dynamicTP,
                stopLoss: dynamicSL,
                positionValue
            };
            this.lastTradeTime = Date.now();
            this.dailyStats.trades++;
            logger_1.default.info(`üöÄüöÄ –≠–õ–ò–¢–ù–ê–Ø –°–î–ï–õ–ö–ê –û–¢–ö–†–´–¢–ê:`);
            logger_1.default.info(`   ${symbol} ${signal.direction.toUpperCase()}`);
            logger_1.default.info(`   –¶–µ–Ω–∞: ${currentPrice.toFixed(2)}`);
            logger_1.default.info(`   –†–∞–∑–º–µ—Ä: ${positionValue.toFixed(2)} USDT (${this.LEVERAGE}x)`);
            logger_1.default.info(`   –ü–æ–∫—Ä—ã—Ç–∏–µ: ${leveragedValue.toFixed(2)} USDT`);
            logger_1.default.info(`   Confidence: ${(signal.confidence * 100).toFixed(1)}%`);
            logger_1.default.info(`   Target: ${(dynamicTP * 100).toFixed(2)}% | Stop: ${(dynamicSL * 100).toFixed(2)}%`);
        }
        catch (error) {
            logger_1.default.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —ç–ª–∏—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏: ${error.message}`);
        }
    }
    async manageElitePosition() {
        if (!this.openPosition)
            return;
        const pos = this.openPosition;
        const currentPrice = await this.exchangeService.getCurrentPrice(pos.symbol);
        const elapsedTime = Date.now() - pos.entryTime;
        // –†–∞—Å—á–µ—Ç PnL
        let pnl = 0;
        if (pos.side === 'long') {
            pnl = (currentPrice - pos.entryPrice) / pos.entryPrice;
        }
        else {
            pnl = (pos.entryPrice - currentPrice) / pos.entryPrice;
        }
        const leveragedPnL = pnl * this.LEVERAGE;
        const pnlUSDT = leveragedPnL * pos.positionValue;
        // –£–ú–ù–´–ï –£–°–õ–û–í–ò–Ø –ó–ê–ö–†–´–¢–ò–Ø
        let shouldClose = false;
        let reason = '';
        // 1. –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å
        if (pnl >= pos.targetProfit) {
            shouldClose = true;
            reason = `üéØ TARGET HIT: ${(pnl * 100).toFixed(2)}%`;
        }
        // 2. –°—Ç–æ–ø-–ª–æ—Å—Å
        else if (pnl <= -pos.stopLoss) {
            shouldClose = true;
            reason = `üõë STOP LOSS: ${(pnl * 100).toFixed(2)}%`;
        }
        // 3. –¢–∞–π–º–∞—É—Ç
        else if (elapsedTime > this.MAX_POSITION_TIME) {
            shouldClose = true;
            reason = `‚è∞ TIMEOUT: ${Math.round(elapsedTime / 60000)}–º–∏–Ω`;
        }
        // 4. –¢–†–ï–ô–õ–ò–ù–ì –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–∏–±—ã–ª–µ–π
        else if (pnl >= pos.targetProfit * 0.7) {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç
            const currentSignal = await this.analyzeUltimateSignal(pos.symbol);
            if (currentSignal.direction !== pos.side && currentSignal.confidence > 0.3) {
                shouldClose = true;
                reason = `üìâ REVERSAL DETECTED`;
            }
        }
        if (shouldClose) {
            await this.closeElitePosition(pnl > 0 ? 'win' : 'loss', leveragedPnL, reason);
        }
        else {
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if (elapsedTime % 30000 < 3000) {
                logger_1.default.info(`üìä ${pos.symbol}: ${(leveragedPnL * 100).toFixed(2)}% (${pnlUSDT.toFixed(2)}$) - ${Math.round(elapsedTime / 1000)}—Å`);
            }
        }
    }
    async closeElitePosition(outcome, leveragedPnL, reason) {
        if (!this.openPosition)
            return;
        const pos = this.openPosition;
        const pnlUSDT = leveragedPnL * pos.positionValue;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª (–°–õ–û–ñ–ù–´–ô –ü–†–û–¶–ï–ù–¢)
        this.equity += pnlUSDT;
        this.dailyStats.totalPnL += pnlUSDT;
        if (outcome === 'win') {
            this.dailyStats.wins++;
        }
        const winRate = this.dailyStats.trades > 0 ? (this.dailyStats.wins / this.dailyStats.trades * 100) : 0;
        logger_1.default.info(`üèÅ –≠–õ–ò–¢–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê:`);
        logger_1.default.info(`   ${pos.symbol} ${pos.side.toUpperCase()}: ${outcome.toUpperCase()}`);
        logger_1.default.info(`   PnL: ${(leveragedPnL * 100).toFixed(2)}% (${pnlUSDT.toFixed(2)} USDT)`);
        logger_1.default.info(`   –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
        logger_1.default.info(`   –ù–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${this.equity.toFixed(2)} USDT`);
        logger_1.default.info(`   üìä –°–µ–≥–æ–¥–Ω—è: ${this.dailyStats.trades} —Å–¥–µ–ª–æ–∫, WinRate: ${winRate.toFixed(1)}%`);
        this.openPosition = null;
    }
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    getUltimateStats() {
        const winRate = this.dailyStats.trades > 0 ? (this.dailyStats.wins / this.dailyStats.trades) : 0;
        const dailyReturn = ((this.equity - 100) / 100) * 100;
        return {
            equity: this.equity,
            dailyPnL: this.dailyStats.totalPnL,
            totalTrades: this.dailyStats.trades,
            winRate: winRate,
            dailyReturn: dailyReturn,
            openPosition: this.openPosition ? 1 : 0,
            leverage: this.LEVERAGE,
            nextTradeIn: Math.max(0, this.COOLDOWN_TIME - (Date.now() - this.lastTradeTime))
        };
    }
    resetDaily() {
        this.dailyStats = { trades: 0, wins: 0, totalPnL: 0 };
    }
}
exports.UltimatePumpHunter = UltimatePumpHunter;
