// üéØ ULTIMATE PUMP HUNTER - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –í–ò–ù–†–ï–ô–¢ –ò –ü–†–û–§–ò–¢
import { ExchangeService } from '../services/exchangeService';    for (const symbol of symbols) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        const lastSymbolTrade = this.symbolLastTrade.get(symbol) || 0;
        if (Date.now() - lastSymbolTrade < this.MIN_TIME_BETWEEN_SAME_SYMBOL) {
          continue;
        }
        
        const signal = await this.analyzeUltimateSignal(symbol);
        
        if (signal.confidence > maxConfidence && signal.confidence >= this.MIN_CONFIDENCE) {
          maxConfidence = signal.confidence;
          bestSignal = { symbol, signal };
        }
      } catch (error: any) {
        // –†–∞–∑–ª–∏—á–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        const isNetworkError = error.message.includes('ETIMEDOUT') || 
                               error.message.includes('ECONNRESET') || 
                               error.message.includes('EHOSTUNREACH');
        
        if (isNetworkError) {
          // –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
          logger.warn(`üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${error.message}`);
        } else {
          // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –æ—à–∏–±–∫–∏
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è ${symbol}: ${error.message}`);
        }
        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–∏–º–≤–æ–ª–æ–º
        continue;
      }
    }m '../utils/logger';

interface PumpSignal {
  strength: number;
  confidence: number;
  direction: 'long' | 'short';
  expectedMove: number;
  timeframe: number;
}

interface Position {
  symbol: string;
  side: 'long' | 'short';
  entryPrice: number;
  quantity: number;
  entryTime: number;
  targetProfit: number;
  stopLoss: number;
  positionValue: number;
}

export class UltimatePumpHunter {
  // –ë–û–ï–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –°–ï–õ–ï–ö–¢–ò–í–ù–û–°–¢–¨
  private readonly LEVERAGE = 100;                     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ
  private readonly POSITION_SIZE = 0.08;               // 8% –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
  private readonly MIN_CONFIDENCE = 0.88;              // 88% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–ü–û–í–´–®–ï–ù–û!)
  private readonly TARGET_PROFIT = 0.055;              // 5.5% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (550% ROI)
  private readonly STOP_LOSS = 0.012;                  // 1.2% —Å—Ç–æ–ø-–ª–æ—Å—Å (120% –ø–æ—Ç–µ—Ä—è)
  private readonly MAX_POSITION_TIME = 3 * 60 * 1000;  // 3 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
  private readonly MIN_PUMP_SIZE = 0.028;              // 2.8% –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–º–ø (–ü–û–í–´–®–ï–ù–û!)
  private readonly COOLDOWN_TIME = 45 * 60 * 1000;     // 45 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
  
  // –ù–û–í–´–ï –§–ò–õ–¨–¢–†–´ –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –ö–ê–ß–ï–°–¢–í–ê
  private readonly MIN_VOLUME_SPIKE = 6.0;             // –ú–∏–Ω–∏–º—É–º 6x –æ–±—ä–µ–º
  private readonly MIN_CONSECUTIVE_MOVES = 4;          // –ú–∏–Ω–∏–º—É–º 4 –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥
  private readonly MAX_DAILY_TRADES = 6;               // –ú–∞–∫—Å–∏–º—É–º 6 —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å
  private readonly MIN_TIME_BETWEEN_SAME_SYMBOL = 2 * 60 * 60 * 1000; // 2 —á–∞—Å–∞ –Ω–∞ —Ç–æ—Ç –∂–µ —Å–∏–º–≤–æ–ª
  
  // –°–õ–û–ñ–ù–´–ô –ü–†–û–¶–ï–ù–¢ –ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï
  private readonly COMPOUND_THRESHOLD = 1.5;           // –ü—Ä–∏ 150% —Ä–æ—Å—Ç–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
  private readonly MAX_POSITION_SCALE = 0.15;          // –ú–∞–∫—Å–∏–º—É–º 15% –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–∞—Ö
  private readonly PROFIT_REINVEST_RATIO = 0.8;        // 80% –ø—Ä–∏–±—ã–ª–∏ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º
  private readonly CONSERVATIVE_MODE_TRIGGER = 0.3;    // –ü—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ 30% –≤–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  
  // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´
  private readonly HOT_STREAK_BONUS = 1.3;             // +30% —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥
  private readonly COLD_STREAK_PENALTY = 0.7;          // -30% —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ —Å–µ—Ä–∏–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–π
  
  // –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê
  private isConservativeMode = false;
  private consecutiveWins = 0;
  private consecutiveLosses = 0;
  private dailyPeakEquity = 0;
  private initialEquity = 0;
  
  private equity: number;
  private openPosition: Position | null = null;
  private lastTradeTime = 0;
  private dailyStats = { trades: 0, wins: 0, totalPnL: 0 };
  private symbolLastTrade: Map<string, number> = new Map(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
  
  private exchangeService: ExchangeService;

  constructor(
    initialEquity: number,
    exchangeService: ExchangeService
  ) {
    this.equity = initialEquity;
    this.initialEquity = initialEquity;
    this.dailyPeakEquity = initialEquity;
    this.exchangeService = exchangeService;
    
    logger.info(`üéØ ULTIMATE PUMP HUNTER –ó–ê–ü–£–©–ï–ù:`);
    logger.info(`üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initialEquity} USDT`);
    logger.info(`‚ö° –ü–ª–µ—á–æ: ${this.LEVERAGE}x | –ë–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ${this.POSITION_SIZE * 100}%`);
    logger.info(`üéØ Target: ${this.TARGET_PROFIT * 100}% | Stop: ${this.STOP_LOSS * 100}%`);
    logger.info(`üìà –°–õ–û–ñ–ù–´–ô –ü–†–û–¶–ï–ù–¢: –ê–∫—Ç–∏–≤–µ–Ω —Å –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º`);
    logger.info(`‚è±Ô∏è –ö—É–ª–¥–∞—É–Ω: ${this.COOLDOWN_TIME / 60000} –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏`);
    logger.info(`‚ö° –ü–ª–µ—á–æ: ${this.LEVERAGE}x | –ü–æ–∑–∏—Ü–∏—è: ${this.POSITION_SIZE * 100}%`);
    logger.info(`üéØ Target: ${this.TARGET_PROFIT * 100}% | Stop: ${this.STOP_LOSS * 100}%`);
    logger.info(`‚è±Ô∏è –ö—É–ª–¥–∞—É–Ω: ${this.COOLDOWN_TIME / 60000} –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏`);
  }
  
  // –ì–õ–ê–í–ù–´–ô –¢–û–†–ì–û–í–´–ô –¶–ò–ö–õ - –†–ê–ë–û–¢–ê –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
  public async executeUltimateHunt(): Promise<void> {
    try {
      // –£–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
      if (this.openPosition) {
        await this.manageElitePosition();
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫
      if (this.dailyStats.trades >= this.MAX_DAILY_TRADES) {
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
      if (Date.now() - this.lastTradeTime < this.COOLDOWN_TIME) {
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      const topSymbols = ['SOLUSDT', 'ETHUSDT', 'BNBUSDT', 'BTCUSDT', 'ADAUSDT', 'DOTUSDT', 'LINKUSDT', 'LTCUSDT'];
      const bestSignal = await this.findUltimateSignal(topSymbols);
      
      if (bestSignal && bestSignal.signal.confidence >= this.MIN_CONFIDENCE) {
        await this.executeEliteTrade(bestSignal);
      }
      
    } catch (error: any) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ULTIMATE HUNT: ${error.message}`);
    }
  }
  
  private async findUltimateSignal(symbols: string[]): Promise<{ symbol: string; signal: PumpSignal } | null> {
    let bestSignal: { symbol: string; signal: PumpSignal } | null = null;
    let maxConfidence = 0;
    
    for (const symbol of symbols) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        const lastSymbolTrade = this.symbolLastTrade.get(symbol) || 0;
        if (Date.now() - lastSymbolTrade < this.MIN_TIME_BETWEEN_SAME_SYMBOL) {
          continue;
        }
        
        const signal = await this.analyzeUltimateSignal(symbol);
        
        if (signal.confidence > maxConfidence && signal.confidence >= this.MIN_CONFIDENCE) {
          maxConfidence = signal.confidence;
          bestSignal = { symbol, signal };
        }
      } catch (error: any) {
        logger.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${symbol}: ${error.message}`);
      }
    }
    
    return bestSignal;
  }
  
  private async analyzeUltimateSignal(symbol: string): Promise<PumpSignal> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç (1m –∏–Ω—Ç–µ—Ä–≤–∞–ª)
      const klines = await this.exchangeService.getKlines(symbol, '1m', 30);
      
      if (klines.length < 20) {
        return { strength: 0, confidence: 0, direction: 'long', expectedMove: 0, timeframe: 0 };
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–≤–µ—á–µ–π vs –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 6
      const recent = klines.slice(-6);
      const baseline = klines.slice(-12, -6);
      
      // –¶–µ–Ω–∞ –∏ –æ–±—ä–µ–º
      const recentAvgPrice = recent.reduce((sum, k) => sum + parseFloat(k.close), 0) / recent.length;
      const baselineAvgPrice = baseline.reduce((sum, k) => sum + parseFloat(k.close), 0) / baseline.length;
      const priceMove = (recentAvgPrice - baselineAvgPrice) / baselineAvgPrice;
      
      const recentAvgVolume = recent.reduce((sum, k) => sum + parseFloat(k.volume), 0) / recent.length;
      const baselineAvgVolume = baseline.reduce((sum, k) => sum + parseFloat(k.volume), 0) / baseline.length;
      const volumeSpike = recentAvgVolume / baselineAvgVolume;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
      let consecutiveMoves = 0;
      const direction = priceMove > 0 ? 1 : -1;
      for (let i = 1; i < recent.length; i++) {
        const move = (parseFloat(recent[i].close) - parseFloat(recent[i-1].close)) / parseFloat(recent[i-1].close);
        if ((move > 0 && direction > 0) || (move < 0 && direction < 0)) {
          consecutiveMoves++;
        }
      }
      
      // –†–∞—Å—á–µ—Ç –∏–º–ø—É–ª—å—Å–∞ (momentum)
      const recentMomentum = recent.slice(-3).reduce((sum, k, i) => {
        if (i === 0) return sum;
        return sum + Math.abs((parseFloat(k.close) - parseFloat(recent[i-1].close)) / parseFloat(recent[i-1].close));
      }, 0);
      
      // –†–ê–°–ß–ï–¢ CONFIDENCE - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ñ–ï–°–¢–ö–ò–ï –ö–†–ò–¢–ï–†–ò–ò
      let confidence = 0;
      const strength = Math.abs(priceMove);
      
      // –£—Å–ª–æ–≤–∏–µ 1: –û—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
      if (strength >= this.MIN_PUMP_SIZE) confidence += 0.3;
      else return { strength: 0, confidence: 0, direction: 'long', expectedMove: 0, timeframe: 0 };
      
      // –£—Å–ª–æ–≤–∏–µ 2: –ú–æ—â–Ω—ã–π –æ–±—ä–µ–º–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫ (—É–∂–µ—Å—Ç–æ—á–µ–Ω–æ)
      if (volumeSpike >= this.MIN_VOLUME_SPIKE) confidence += 0.3;
      else if (volumeSpike >= 4.0) confidence += 0.2;
      else return { strength: 0, confidence: 0, direction: 'long', expectedMove: 0, timeframe: 0 };
      
      // –£—Å–ª–æ–≤–∏–µ 3: –ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
      if (consecutiveMoves >= this.MIN_CONSECUTIVE_MOVES) confidence += 0.25;
      else return { strength: 0, confidence: 0, direction: 'long', expectedMove: 0, timeframe: 0 };
      
      // –£—Å–ª–æ–≤–∏–µ 4: –ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏–º–ø—É–ª—å—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ confidence)
      if (recentMomentum > 0.02) confidence += 0.15;
      else if (recentMomentum > 0.015) confidence += 0.1;
      else confidence += 0.05;
      
      // –°–£–ü–ï–†-–ë–û–ù–£–°–´ –∑–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
      if (strength >= 0.04 && volumeSpike >= 10) confidence += 0.1; // –ú–µ–≥–∞-–ø–∞–º–ø
      if (consecutiveMoves === 5 && volumeSpike >= 8) confidence += 0.05; // –ò–¥–µ–∞–ª—å–Ω–∞—è –≤–æ–ª–Ω–∞
      if (strength >= 0.035 && recentMomentum > 0.025) confidence += 0.05; // –£—Å–∫–æ—Ä–µ–Ω–∏–µ
      
      return {
        strength,
        confidence: Math.min(confidence, 1.0),
        direction: priceMove > 0 ? 'long' : 'short',
        expectedMove: strength * 1.5,
        timeframe: 180 // 3 –º–∏–Ω—É—Ç—ã
      };
      
    } catch (error: any) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è ${symbol}: ${error.message}`);
      return { strength: 0, confidence: 0, direction: 'long', expectedMove: 0, timeframe: 0 };
    }
  }
  
  private async executeEliteTrade(best: { symbol: string; signal: PumpSignal }): Promise<void> {
    try {
      const { symbol, signal } = best;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
      const currentPrice = await this.exchangeService.getCurrentPrice(symbol);
      
      // –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ê–ó–ú–ï–† –ü–û–ó–ò–¶–ò–ò —Å —É—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ –ò –°–õ–û–ñ–ù–û–ì–û –ü–†–û–¶–ï–ù–¢–ê
      let adaptivePositionSize = this.calculateOptimalPositionSize(signal.confidence);
      
      // –°–£–ü–ï–†-–ê–ì–†–ï–°–°–ò–í–ù–´–ô –†–ï–ñ–ò–ú –¥–ª—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
      if (this.shouldUseAggressiveMode(signal)) {
        adaptivePositionSize *= 1.8; // +80% –∫ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏
        logger.info(`‚ö°‚ö° –°–£–ü–ï–†-–ê–ì–†–ï–°–°–ò–í–ù–´–ô –†–ï–ñ–ò–ú: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 80% –¥–ª—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞!`);
      }
      
      const positionValue = this.equity * adaptivePositionSize;
      const leveragedValue = positionValue * this.LEVERAGE;
      const quantity = leveragedValue / currentPrice;
      
      // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï TP/SL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
      const dynamicTP = this.TARGET_PROFIT * (1 + signal.strength * 2); // –ë–æ–ª—å—à–µ —Å–∏–ª–∞ = –±–æ–ª—å—à–µ —Ü–µ–ª—å
      const dynamicSL = this.STOP_LOSS * (2 - signal.confidence); // –ë–æ–ª—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ = –º–µ–Ω—å—à–µ —Å—Ç–æ–ø
      
      this.openPosition = {
        symbol,
        side: signal.direction,
        entryPrice: currentPrice,
        quantity,
        entryTime: Date.now(),
        targetProfit: dynamicTP,
        stopLoss: dynamicSL,
        positionValue
      };
      
      this.lastTradeTime = Date.now();
      this.symbolLastTrade.set(symbol, Date.now()); // –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
      this.dailyStats.trades++;
      
      logger.info(`üöÄüöÄ –≠–õ–ò–¢–ù–ê–Ø –°–î–ï–õ–ö–ê –û–¢–ö–†–´–¢–ê:`);
      logger.info(`   ${symbol} ${signal.direction.toUpperCase()}`);
      logger.info(`   –¶–µ–Ω–∞: ${currentPrice.toFixed(2)}`);
      logger.info(`   –†–∞–∑–º–µ—Ä: ${positionValue.toFixed(2)} USDT (${this.LEVERAGE}x)`);
      logger.info(`   –ü–æ–∫—Ä—ã—Ç–∏–µ: ${leveragedValue.toFixed(2)} USDT`);
      logger.info(`   Confidence: ${(signal.confidence * 100).toFixed(1)}%`);
      logger.info(`   Target: ${(dynamicTP * 100).toFixed(2)}% | Stop: ${(dynamicSL * 100).toFixed(2)}%`);
      logger.info(`   üìä –°–¥–µ–ª–∫–∞ ${this.dailyStats.trades}/${this.MAX_DAILY_TRADES} –∑–∞ —Å–µ–≥–æ–¥–Ω—è`);
      
    } catch (error: any) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —ç–ª–∏—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏: ${error.message}`);
    }
  }
  
  private async manageElitePosition(): Promise<void> {
    if (!this.openPosition) return;
    
    const pos = this.openPosition;
    const currentPrice = await this.exchangeService.getCurrentPrice(pos.symbol);
    const elapsedTime = Date.now() - pos.entryTime;
    
    // –†–∞—Å—á–µ—Ç PnL
    let pnl = 0;
    if (pos.side === 'long') {
      pnl = (currentPrice - pos.entryPrice) / pos.entryPrice;
    } else {
      pnl = (pos.entryPrice - currentPrice) / pos.entryPrice;
    }
    
    const leveragedPnL = pnl * this.LEVERAGE;
    const pnlUSDT = leveragedPnL * pos.positionValue;
    
    // –ü–†–û–í–ï–†–Ø–ï–ú –ß–ê–°–¢–ò–ß–ù–£–Æ –§–ò–ö–°–ê–¶–ò–Æ –ü–†–ò–ë–´–õ–ò
    if (pnl > 0) {
      const partialClosed = await this.checkPartialProfits(pos, pnl, currentPrice);
      if (partialClosed) return; // –ï—Å–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã–ª–∏, –≤—ã—Ö–æ–¥–∏–º
    }
    
    // –£–ú–ù–´–ï –£–°–õ–û–í–ò–Ø –ó–ê–ö–†–´–¢–ò–Ø
    let shouldClose = false;
    let reason = '';
    
    // 1. –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å
    if (pnl >= pos.targetProfit) {
      shouldClose = true;
      reason = `üéØ TARGET HIT: ${(pnl * 100).toFixed(2)}%`;
    }
    
    // 2. –°—Ç–æ–ø-–ª–æ—Å—Å
    else if (pnl <= -pos.stopLoss) {
      shouldClose = true;
      reason = `üõë STOP LOSS: ${(pnl * 100).toFixed(2)}%`;
    }
    
    // 3. –¢–∞–π–º–∞—É—Ç
    else if (elapsedTime > this.MAX_POSITION_TIME) {
      shouldClose = true;
      reason = `‚è∞ TIMEOUT: ${Math.round(elapsedTime/60000)}–º–∏–Ω`;
    }
    
    // 4. –£–ú–ù–´–ô –¢–†–ï–ô–õ–ò–ù–ì –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
    else if (pnl >= pos.targetProfit * 0.6) {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç –∏ –æ–±—ä–µ–º
      const currentSignal = await this.analyzeUltimateSignal(pos.symbol);
      const ticker24hr = await this.exchangeService.getTicker24hr(pos.symbol);
      const currentVolume = parseFloat(ticker24hr.volume);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –æ–±—ä–µ–º –ø–∞–¥–∞–µ—Ç –ò –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
      if (currentSignal.direction !== pos.side && 
          currentSignal.confidence > 0.25 && 
          currentVolume < parseFloat(ticker24hr.volume) * 0.7) {
        shouldClose = true;
        reason = `üìâ SMART TRAILING: –†–∞–∑–≤–æ—Ä–æ—Ç + –ø–∞–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–∞`;
      }
    }
    
    // 5. –ó–ê–©–ò–¢–ê –û–¢ –†–ï–ó–ö–ò–• –î–í–ò–ñ–ï–ù–ò–ô –ü–†–û–¢–ò–í –ù–ê–°
    else if (pnl <= -pos.stopLoss * 0.7) {
      // –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –µ—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å —É—Å–∫–æ—Ä—è–µ—Ç—Å—è
      const recentSignal = await this.analyzeUltimateSignal(pos.symbol);
      if (recentSignal.direction !== pos.side && recentSignal.confidence > 0.5) {
        shouldClose = true;
        reason = `‚ö° FAST EXIT: –°–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤`;
      }
    }
    
    if (shouldClose) {
      await this.closeElitePosition(pnl > 0 ? 'win' : 'loss', leveragedPnL, reason);
    } else {
      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      if (elapsedTime % 30000 < 3000) {
        logger.info(`üìä ${pos.symbol}: ${(leveragedPnL * 100).toFixed(2)}% (${pnlUSDT.toFixed(2)}$) - ${Math.round(elapsedTime/1000)}—Å`);
      }
    }
    
    // –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê PARTIAL PROFITS
    await this.checkPartialProfits(pos, pnl, currentPrice);
  }
  
  private async closeElitePosition(outcome: 'win' | 'loss', leveragedPnL: number, reason: string): Promise<void> {
    if (!this.openPosition) return;
    
    const pos = this.openPosition;
    const pnlUSDT = leveragedPnL * pos.positionValue;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª (–°–õ–û–ñ–ù–´–ô –ü–†–û–¶–ï–ù–¢)
    this.equity += pnlUSDT;
    this.dailyStats.totalPnL += pnlUSDT;
    
    if (outcome === 'win') {
      this.dailyStats.wins++;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    this.updateBotState(pnlUSDT);
    
    const winRate = this.dailyStats.trades > 0 ? (this.dailyStats.wins / this.dailyStats.trades * 100) : 0;
    const totalReturn = ((this.equity - this.initialEquity) / this.initialEquity * 100);
    
    logger.info(`üèÅ –≠–õ–ò–¢–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê:`);
    logger.info(`   ${pos.symbol} ${pos.side.toUpperCase()}: ${outcome.toUpperCase()}`);
    logger.info(`   PnL: ${(leveragedPnL * 100).toFixed(2)}% (${pnlUSDT.toFixed(2)} USDT)`);
    logger.info(`   –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    logger.info(`   üí∞ –ù–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${this.equity.toFixed(2)} USDT`);
    logger.info(`   üìä –°–µ–≥–æ–¥–Ω—è: ${this.dailyStats.trades} —Å–¥–µ–ª–æ–∫, WinRate: ${winRate.toFixed(1)}%`);
    logger.info(`   üöÄ –û–ë–©–ò–ô –†–û–°–¢: ${totalReturn.toFixed(1)}% –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞`);
    
    if (outcome === 'win' && this.consecutiveWins >= 3) {
      logger.info(`   üî• –°–ï–†–ò–Ø –ü–û–ë–ï–î: ${this.consecutiveWins} –ø–æ–¥—Ä—è–¥!`);
    }
    
    this.openPosition = null;
  }
  
  // –ü–†–û–î–í–ò–ù–£–¢–´–ô –†–ê–°–ß–ï–¢ –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ì–û –†–ê–ó–ú–ï–†–ê –ü–û–ó–ò–¶–ò–ò
  private calculateOptimalPositionSize(confidence: number): number {
    let baseSize = this.POSITION_SIZE;
    
    // 1. –°–õ–û–ñ–ù–´–ô –ü–†–û–¶–ï–ù–¢ - –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–æ—Å—Ç–æ–º –∫–∞–ø–∏—Ç–∞–ª–∞
    const growthMultiplier = this.equity / this.initialEquity;
    if (growthMultiplier >= this.COMPOUND_THRESHOLD) {
      // –ü—Ä–∏ —Ä–æ—Å—Ç–µ –∫–∞–ø–∏—Ç–∞–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
      const compoundBonus = Math.min(growthMultiplier * 0.1, 0.07); // –ú–∞–∫—Å–∏–º—É–º +7%
      baseSize += compoundBonus;
      
      logger.info(`üìà –°–õ–û–ñ–ù–´–ô –ü–†–û–¶–ï–ù–¢: –†–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ ${(growthMultiplier * 100).toFixed(1)}%, –±–æ–Ω—É—Å –∫ –ø–æ–∑–∏—Ü–∏–∏: +${(compoundBonus * 100).toFixed(1)}%`);
    }
    
    // 2. –ö–ê–ß–ï–°–¢–í–û –°–ò–ì–ù–ê–õ–ê - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å—É–ø–µ—Ä-—Å–∏–≥–Ω–∞–ª–æ–≤
    if (confidence >= 0.95) {
      baseSize *= 1.5; // +50% –¥–ª—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    } else if (confidence >= 0.92) {
      baseSize *= 1.3; // +30% –¥–ª—è –æ—Ç–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    } else if (confidence >= 0.90) {
      baseSize *= 1.15; // +15% –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    }
    
    // 3. –°–ï–†–ò–ò –ü–û–ë–ï–î/–ü–û–†–ê–ñ–ï–ù–ò–ô
    if (this.consecutiveWins >= 3) {
      baseSize *= this.HOT_STREAK_BONUS; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏ —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥
      logger.info(`üî• HOT STREAK: ${this.consecutiveWins} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ ${((this.HOT_STREAK_BONUS - 1) * 100).toFixed(0)}%`);
    } else if (this.consecutiveLosses >= 2) {
      baseSize *= this.COLD_STREAK_PENALTY; // –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–∏ —Å–µ—Ä–∏–∏ –ø–æ—Ç–µ—Ä—å
      logger.info(`‚ùÑÔ∏è COLD STREAK: ${this.consecutiveLosses} –ø–æ—Ç–µ—Ä—å –ø–æ–¥—Ä—è–¥, —É–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ ${((1 - this.COLD_STREAK_PENALTY) * 100).toFixed(0)}%`);
    }
    
    // 4. –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú –ø—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ
    if (this.isConservativeMode) {
      baseSize *= 0.6; // –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ
      logger.info(`üõ°Ô∏è –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú: –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 40%`);
    }
    
    // 5. –î–ù–ï–í–ù–û–ô –í–ò–ù–†–ï–ô–¢
    const currentWinRate = this.dailyStats.trades > 0 ? this.dailyStats.wins / this.dailyStats.trades : 1;
    if (currentWinRate < 0.6) {
      baseSize *= 0.7; // –û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –≤–∏–Ω—Ä–µ–π—Ç–µ
    } else if (currentWinRate > 0.9) {
      baseSize *= 1.2; // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –≤–∏–Ω—Ä–µ–π—Ç–µ
    }
    
    // 6. –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
    const maxSize = this.equity > this.initialEquity * 3 ? this.MAX_POSITION_SCALE : 0.12;
    return Math.min(Math.max(baseSize, 0.04), maxSize); // –ú–∏–Ω–∏–º—É–º 4%, –º–∞–∫—Å–∏–º—É–º 12-15%
  }
  
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú –ë–û–¢–ê
  private updateBotState(pnlUSDT: number): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª
    if (this.equity > this.dailyPeakEquity) {
      this.dailyPeakEquity = this.equity;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å–∞–¥–∫—É –¥–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const drawdown = (this.dailyPeakEquity - this.equity) / this.dailyPeakEquity;
    this.isConservativeMode = drawdown >= this.CONSERVATIVE_MODE_TRIGGER;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π
    if (pnlUSDT > 0) {
      this.consecutiveWins++;
      this.consecutiveLosses = 0;
    } else {
      this.consecutiveLosses++;
      this.consecutiveWins = 0;
    }
    
    if (this.isConservativeMode) {
      logger.warn(`‚ö†Ô∏è –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù: –ü—Ä–æ—Å–∞–¥–∫–∞ ${(drawdown * 100).toFixed(1)}%`);
    }
  }
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  public getUltimateStats() {
    const winRate = this.dailyStats.trades > 0 ? (this.dailyStats.wins / this.dailyStats.trades) : 0;
    const totalReturn = ((this.equity - this.initialEquity) / this.initialEquity) * 100;
    const dailyReturn = ((this.equity - this.initialEquity) / this.initialEquity) * 100; // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç
    const growthMultiplier = this.equity / this.initialEquity;
    const drawdown = this.dailyPeakEquity > 0 ? ((this.dailyPeakEquity - this.equity) / this.dailyPeakEquity) * 100 : 0;
    
    return {
      equity: this.equity,
      initialEquity: this.initialEquity,
      totalReturn: totalReturn,
      dailyPnL: this.dailyStats.totalPnL,
      totalTrades: this.dailyStats.trades,
      winRate: winRate,
      dailyReturn: dailyReturn,
      openPosition: this.openPosition ? 1 : 0,
      leverage: this.LEVERAGE,
      nextTradeIn: Math.max(0, this.COOLDOWN_TIME - (Date.now() - this.lastTradeTime)),
      // –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
      growthMultiplier: growthMultiplier,
      isConservativeMode: this.isConservativeMode,
      consecutiveWins: this.consecutiveWins,
      consecutiveLosses: this.consecutiveLosses,
      currentDrawdown: drawdown,
      compoundActive: growthMultiplier >= this.COMPOUND_THRESHOLD
    };
  }
  
  public resetDaily(): void {
    this.dailyStats = { trades: 0, wins: 0, totalPnL: 0 };
    this.symbolLastTrade.clear(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    this.dailyPeakEquity = this.equity; // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª
    this.consecutiveWins = 0;
    this.consecutiveLosses = 0;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –∫–∞–ø–∏—Ç–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
    if (this.equity >= this.dailyPeakEquity * 0.9) {
      this.isConservativeMode = false;
    }
    
    logger.info('üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
    logger.info(`üí∞ –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${this.equity.toFixed(2)} USDT`);
    logger.info(`üöÄ –û–±—â–∏–π —Ä–æ—Å—Ç: ${(((this.equity - this.initialEquity) / this.initialEquity) * 100).toFixed(1)}%`);
  }
  
  // –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê PARTIAL PROFITS
  private async checkPartialProfits(pos: Position, pnl: number, currentPrice: number): Promise<boolean> {
    if (pnl <= 0) return false;
    
    const targetReached = pnl / pos.targetProfit;
    
    // –ß–ê–°–¢–ò–ß–ù–ê–Ø –§–ò–ö–°–ê–¶–ò–Ø –ü–†–ò–ë–´–õ–ò –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    if (targetReached >= 0.6 && targetReached < 0.8) {
      // –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 60% —Ü–µ–ª–∏ - —Ñ–∏–∫—Å–∏—Ä—É–µ–º 30% –ø–æ–∑–∏—Ü–∏–∏
      const partialProfit = pos.positionValue * 0.3 * pnl * this.LEVERAGE;
      this.equity += partialProfit;
      
      logger.info(`üíé PARTIAL PROFIT: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ 30% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ ${(pnl * 100).toFixed(2)}%`);
      logger.info(`   üí∞ –ü—Ä–∏–±—ã–ª—å: +${partialProfit.toFixed(2)} USDT`);
      
      // –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∫ –±–µ–∑—É–±—ã—Ç–∫—É
      pos.stopLoss = Math.min(pos.stopLoss, 0.005); // –ú–∞–∫—Å–∏–º—É–º 0.5% —Ä–∏—Å–∫
      
      return false; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ—Ä–∂–∞—Ç—å –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–∑–∏—Ü–∏—é
    }
    
    if (targetReached >= 0.8 && targetReached < 1.2) {
      // –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 80% —Ü–µ–ª–∏ - —Ñ–∏–∫—Å–∏—Ä—É–µ–º –µ—â–µ 40% –ø–æ–∑–∏—Ü–∏–∏
      const partialProfit = pos.positionValue * 0.4 * pnl * this.LEVERAGE;
      this.equity += partialProfit;
      
      logger.info(`üíéüíé SECOND PARTIAL: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –µ—â–µ 40% –ø–æ–∑–∏—Ü–∏–∏`);
      logger.info(`   üí∞ –ü—Ä–∏–±—ã–ª—å: +${partialProfit.toFixed(2)} USDT`);
      
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—Ç–æ–ø –≤ –ø—Ä–∏–±—ã–ª—å
      pos.stopLoss = -0.01; // 1% –ø—Ä–∏–±—ã–ª—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω
      
      return false; // –î–µ—Ä–∂–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30% –¥–ª—è –º–∞–∫—Å–∏–º—É–º–∞
    }
    
    return false;
  }
  
  // –°–£–ü–ï–†-–ê–ì–†–ï–°–°–ò–í–ù–´–ô –†–ï–ñ–ò–ú –¥–ª—è exceptional —Å–∏–≥–Ω–∞–ª–æ–≤
  private shouldUseAggressiveMode(signal: PumpSignal): boolean {
    return (
      signal.confidence >= 0.95 &&
      signal.strength >= 0.04 &&
      this.consecutiveWins >= 2 &&
      !this.isConservativeMode &&
      this.dailyStats.trades < this.MAX_DAILY_TRADES - 2 // –û—Å—Ç–∞–ª—Å—è –∑–∞–ø–∞—Å —Å–¥–µ–ª–æ–∫
    );
  }
}
