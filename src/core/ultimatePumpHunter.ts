// üéØ ULTIMATE PUMP HUNTER - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –í–ò–ù–†–ï–ô–¢ –ò –ü–†–û–§–ò–¢
import { ExchangeService } from '../services/exchangeService';
import logger from '../utils/logger';

interface PumpSignal {
  strength: number;
  confidence: number;
  direction: 'long' | 'short';
  expectedMove: number;
  timeframe: number;
}

interface Position {
  symbol: string;
  side: 'long' | 'short';
  entryPrice: number;
  quantity: number;
  entryTime: number;
  targetProfit: number;
  stopLoss: number;
  positionValue: number;
  leverage: number; // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–µ—á–æ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
}

export class UltimatePumpHunter {
  // –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–õ–ï–ß–ï–ô
  private readonly BASE_LEVERAGE = 50;                 // –ë–∞–∑–æ–≤–æ–µ –ø–ª–µ—á–æ –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  private readonly MIN_LEVERAGE = 20;                  // –ú–∏–Ω–∏–º—É–º –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  private readonly MAX_LEVERAGE = 200;                 // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  private readonly ULTRA_LEVERAGE = 250;               // –≠–∫—Å—Ç—Ä–µ–º—É–º –¥–ª—è perfect conditions
  
  // –ü–û–†–û–ì–ò –î–õ–Ø –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –ü–õ–ï–ß–ê
  private readonly ULTRA_CONFIDENCE_THRESHOLD = 0.97;  // 97% –¥–ª—è 250x
  private readonly HIGH_CONFIDENCE_THRESHOLD = 0.94;   // 94% –¥–ª—è 150-200x  
  private readonly GOOD_CONFIDENCE_THRESHOLD = 0.90;   // 90% –¥–ª—è 75-100x
  private readonly MIN_CONFIDENCE_THRESHOLD = 0.88;    // 88% –¥–ª—è 20-50x
  private readonly BASE_POSITION_SIZE = 0.08;          // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è reference
  private readonly MIN_CONFIDENCE = 0.88;              // 88% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
  private readonly TARGET_PROFIT = 0.055;              // 5.5% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
  private readonly STOP_LOSS = 0.012;                  // 1.2% —Å—Ç–æ–ø-–ª–æ—Å—Å
  private readonly MAX_POSITION_TIME = 3 * 60 * 1000;  // 3 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
  private readonly MIN_PUMP_SIZE = 0.028;              // 2.8% –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞–º–ø
  private readonly COOLDOWN_TIME = 0;                  // –ë–ï–ó –ö–£–õ–î–ê–£–ù–ê
  
  // –ê–î–ê–ü–¢–ò–í–ù–´–ï –õ–ò–ú–ò–¢–´ –ü–û–ó–ò–¶–ò–ô
  private readonly MIN_POSITION_SIZE = 0.02;           // 2% –º–∏–Ω–∏–º—É–º –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  private readonly MAX_POSITION_SIZE = 0.22;           // 22% –º–∞–∫—Å–∏–º—É–º –¥–ª—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö
  private readonly EXCEPTIONAL_THRESHOLD = 0.96;       // 96% –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
  private readonly EXCELLENT_THRESHOLD = 0.93;         // 93% –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π
  private readonly GOOD_THRESHOLD = 0.90;              // 90% –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
  
  // –†–ê–°–®–ò–†–ï–ù–ù–´–ï –õ–ò–ú–ò–¢–´ –î–õ–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ü–ê–†
  private readonly MIN_VOLUME_SPIKE = 6.0;             // –ú–∏–Ω–∏–º—É–º 6x –æ–±—ä–µ–º
  private readonly MIN_CONSECUTIVE_MOVES = 4;          // –ú–∏–Ω–∏–º—É–º 4 –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥
  private readonly MAX_DAILY_TRADES = 25;              // –£–í–ï–õ–ò–ß–ï–ù–û –¥–æ 25 —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å!
  private readonly MIN_TIME_BETWEEN_SAME_SYMBOL = 20 * 60 * 1000; // –°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–æ 20 –º–∏–Ω—É—Ç –Ω–∞ —Å–∏–º–≤–æ–ª
  
  // –°–õ–û–ñ–ù–´–ô –ü–†–û–¶–ï–ù–¢ –ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï
  private readonly COMPOUND_THRESHOLD = 1.5;           // –ü—Ä–∏ 150% —Ä–æ—Å—Ç–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
  private readonly MAX_POSITION_SCALE = 0.15;          // –ú–∞–∫—Å–∏–º—É–º 15% –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–∞—Ö
  private readonly PROFIT_REINVEST_RATIO = 0.8;        // 80% –ø—Ä–∏–±—ã–ª–∏ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º
  private readonly CONSERVATIVE_MODE_TRIGGER = 0.3;    // –ü—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ 30% –≤–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  
  // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´
  private readonly HOT_STREAK_BONUS = 1.3;             // +30% —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥
  private readonly COLD_STREAK_PENALTY = 0.7;          // -30% —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ —Å–µ—Ä–∏–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–π
  
  // –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê
  private isConservativeMode = false;
  private consecutiveWins = 0;
  private consecutiveLosses = 0;
  private dailyPeakEquity = 0;
  private initialEquity = 0;
  
  private equity: number;
  private openPosition: Position | null = null;
  private lastTradeTime = 0;
  private dailyStats = { trades: 0, wins: 0, totalPnL: 0 };
  private symbolLastTrade: Map<string, number> = new Map(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
  
  private exchangeService: ExchangeService;

  constructor(
    initialEquity: number,
    exchangeService: ExchangeService
  ) {
    this.equity = initialEquity;
    this.initialEquity = initialEquity;
    this.dailyPeakEquity = initialEquity;
    this.exchangeService = exchangeService;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
    const allSymbols = [
      'SOLUSDT', 'AVAXUSDT', 'ADAUSDT', 'LINKUSDT', 'ETHUSDT', 'DOTUSDT', 'BNBUSDT', 'BTCUSDT',
      'MATICUSDT', 'LTCUSDT', 'XRPUSDT', 'TRXUSDT', 'ATOMUSDT', 'NEARUSDT', 'FTMUSDT',
      'UNIUSDT', 'AAVEUSDT', 'MANAUSDT', 'SANDUSDT', 'XLMUSDT', 'EOSUSDT', 'VETUSDT', 'ALGOUSDT', 'ICXUSDT'
    ];
    this.initializeSymbolPriorities(allSymbols);
    
    logger.info(`üéØ ULTIMATE PUMP HUNTER –ó–ê–ü–£–©–ï–ù:`);
    logger.info(`üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initialEquity} USDT`);
    logger.info(`‚ö° –ê–î–ê–ü–¢–ò–í–ù–û–ï –ü–õ–ï–ß–û: ${this.MIN_LEVERAGE}x-${this.ULTRA_LEVERAGE}x –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞`);
    logger.info(`üìä –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: ${this.MIN_POSITION_SIZE * 100}%-${this.MAX_POSITION_SIZE * 100}%`);
    logger.info(`üéØ Target: ${this.TARGET_PROFIT * 100}% | Stop: ${this.STOP_LOSS * 100}%`);
    logger.info(`üìà –î–í–û–ô–ù–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø: –£–º–Ω–æ–µ –ø–ª–µ—á–æ + —É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏`);
    logger.info(`üöÄ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –û–•–í–ê–¢: 24 —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –≤–º–µ—Å—Ç–æ 8! (3x –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π)`);
    logger.info(`‚ö° –£–í–ï–õ–ò–ß–ï–ù–ù–´–ô –õ–ò–ú–ò–¢: –î–æ ${this.MAX_DAILY_TRADES} —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å! (+108% –±–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫)`);
    logger.info(`‚è±Ô∏è –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —Ü–∏–∫–ª: ${this.MIN_TIME_BETWEEN_SAME_SYMBOL / 60000} –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏ —Å–∏–º–≤–æ–ª–∞`);
    logger.info(`üìä –û–ñ–ò–î–ê–ï–ú–´–ô –ü–†–ò–†–û–°–¢: +300-500% –∫ –º–µ—Å—è—á–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–ª–µ—á–∞–º!`);
  }
  
  // –ì–õ–ê–í–ù–´–ô –¢–û–†–ì–û–í–´–ô –¶–ò–ö–õ - –†–ê–ë–û–¢–ê –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
  public async executeUltimateHunt(): Promise<void> {
    try {
      // –£–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
      if (this.openPosition) {
        await this.manageElitePosition();
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫
      if (this.dailyStats.trades >= this.MAX_DAILY_TRADES) {
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
      if (Date.now() - this.lastTradeTime < this.COOLDOWN_TIME) {
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –†–ê–°–®–ò–†–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–£–í–ï–õ–ò–ß–ï–ù–û —Å 8 –¥–æ 25 –ø–∞—Ä!)
      const topSymbols = [
        // ü•á –¢–û–ü-–¢–∏—Ä (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å + –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è)
        'SOLUSDT',   // #1 - Solana: –õ—É—á—à–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–∞–º–ø–æ–≤
        'AVAXUSDT',  // #2 - Avalanche: –ú–æ—â–Ω—ã–µ –∏–º–ø—É–ª—å—Å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è  
        'ADAUSDT',   // #3 - Cardano: –ü–æ–ø—É–ª—è—Ä–µ–Ω —É –º–∞—Å—Å, —á–∞—Å—Ç—ã–µ –ø–∞–º–ø—ã
        'LINKUSDT',  // #4 - Chainlink: –†–µ–∑–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç—è—Ö
        'ETHUSDT',   // #5 - Ethereum: –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å + –∫—Ä—É–ø–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
        'DOTUSDT',   // #6 - Polkadot: –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        'BNBUSDT',   // #7 - Binance Coin: –ú–æ—â–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
        'BTCUSDT',   // #8 - Bitcoin: –û—Å–Ω–æ–≤–∞ —Ä—ã–Ω–∫–∞
        
        // ‚≠ê –í–¢–û–†–û–ô –≠–®–ï–õ–û–ù (–≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
        'MATICUSDT', // #9 - Polygon: DeFi –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
        'LTCUSDT',   // #10 - Litecoin: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø–∞–º–ø—ã
        'XRPUSDT',   // #11 - Ripple: –û–≥—Ä–æ–º–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        'TRXUSDT',   // #12 - Tron: –ß–∞—Å—Ç—ã–µ —Ä–µ–∑–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        'ATOMUSDT',  // #13 - Cosmos: –ú–µ–∂—Å–µ—Ç–µ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
        'NEARUSDT',  // #14 - Near: –ù–æ–≤–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞
        'FTMUSDT',   // #15 - Fantom: DeFi —Å–µ–∫—Ç–æ—Ä
        
        // üöÄ –¢–†–ï–¢–ò–ô –≠–®–ï–õ–û–ù (–≤–∑—Ä—ã–≤–Ω–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª)
        'UNIUSDT',   // #16 - Uniswap: DeFi –ª–∏–¥–µ—Ä
        'AAVEUSDT',  // #17 - Aave: DeFi –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ
        'MANAUSDT',  // #18 - Decentraland: –ú–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–∞—è
        'SANDUSDT',  // #19 - Sandbox: Gaming —Å–µ–∫—Ç–æ—Ä
        'XLMUSDT',   // #20 - Stellar: –ö–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å XRP
        'EOSUSDT',   // #21 - EOS: –°—Ç–∞—Ä—ã–µ –Ω–æ —Å–∏–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
        'VETUSDT',   // #22 - VeChain: Enterprise —Ä–µ—à–µ–Ω–∏—è
        'ALGOUSDT',  // #23 - Algorand: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞–º–ø—ã
        'ICXUSDT'    // #24 - ICON: –ö–æ—Ä–µ–π—Å–∫–∏–π –±–ª–æ–∫—á–µ–π–Ω
      ];
      const bestSignal = await this.findUltimateSignal(
        this.getSmartSymbolsToScan(topSymbols)
      );
      
      if (bestSignal && bestSignal.signal.confidence >= this.MIN_CONFIDENCE) {
        await this.executeEliteTrade(bestSignal);
      }
      
    } catch (error: any) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ ULTIMATE HUNT: ${error.message}`);
    }
  }
  
  private async findUltimateSignal(symbols: string[]): Promise<{ symbol: string; signal: PumpSignal } | null> {
    let bestSignal: { symbol: string; signal: PumpSignal } | null = null;
    let maxConfidence = 0;
    
    for (const symbol of symbols) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        const lastSymbolTrade = this.symbolLastTrade.get(symbol) || 0;
        if (Date.now() - lastSymbolTrade < this.MIN_TIME_BETWEEN_SAME_SYMBOL) {
          continue;
        }
        
        const signal = await this.analyzeUltimateSignal(symbol);
        
        if (signal.confidence > maxConfidence && signal.confidence >= this.MIN_CONFIDENCE) {
          maxConfidence = signal.confidence;
          bestSignal = { symbol, signal };
        }
      } catch (error: any) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        const isNetworkError = error.code === 'ECONNRESET' || 
                               error.code === 'ETIMEDOUT' || 
                               error.code === 'EHOSTUNREACH' ||
                               error.message?.includes('read ETIMEDOUT') ||
                               error.message?.includes('read ECONNRESET') ||
                               error.message?.includes('read EHOSTUNREACH');
        
        if (isNetworkError) {
          logger.warn(`üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${symbol}: ${error.message} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º`);
        } else {
          logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è ${symbol}: ${error.message}`);
        }
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É
      }
    }
    
    return bestSignal;
  }
  
  private async analyzeUltimateSignal(symbol: string): Promise<PumpSignal> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç (1m –∏–Ω—Ç–µ—Ä–≤–∞–ª)
      const klines = await this.exchangeService.getKlines(symbol, '1m', 30);
      
      if (klines.length < 20) {
        return { strength: 0, confidence: 0, direction: 'long', expectedMove: 0, timeframe: 0 };
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–≤–µ—á–µ–π vs –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 6
      const recent = klines.slice(-6);
      const baseline = klines.slice(-12, -6);
      
      // –¶–µ–Ω–∞ –∏ –æ–±—ä–µ–º
      const recentAvgPrice = recent.reduce((sum, k) => sum + parseFloat(k.close), 0) / recent.length;
      const baselineAvgPrice = baseline.reduce((sum, k) => sum + parseFloat(k.close), 0) / baseline.length;
      const priceMove = (recentAvgPrice - baselineAvgPrice) / baselineAvgPrice;
      
      const recentAvgVolume = recent.reduce((sum, k) => sum + parseFloat(k.volume), 0) / recent.length;
      const baselineAvgVolume = baseline.reduce((sum, k) => sum + parseFloat(k.volume), 0) / baseline.length;
      const volumeSpike = recentAvgVolume / baselineAvgVolume;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
      let consecutiveMoves = 0;
      const direction = priceMove > 0 ? 1 : -1;
      for (let i = 1; i < recent.length; i++) {
        const move = (parseFloat(recent[i].close) - parseFloat(recent[i-1].close)) / parseFloat(recent[i-1].close);
        if ((move > 0 && direction > 0) || (move < 0 && direction < 0)) {
          consecutiveMoves++;
        }
      }
      
      // –†–∞—Å—á–µ—Ç –∏–º–ø—É–ª—å—Å–∞ (momentum)
      const recentMomentum = recent.slice(-3).reduce((sum, k, i) => {
        if (i === 0) return sum;
        return sum + Math.abs((parseFloat(k.close) - parseFloat(recent[i-1].close)) / parseFloat(recent[i-1].close));
      }, 0);
      
      // –†–ê–°–ß–ï–¢ CONFIDENCE - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ñ–ï–°–¢–ö–ò–ï –ö–†–ò–¢–ï–†–ò–ò
      let confidence = 0;
      const strength = Math.abs(priceMove);
      
      // –£—Å–ª–æ–≤–∏–µ 1: –û—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
      if (strength >= this.MIN_PUMP_SIZE) confidence += 0.3;
      else return { strength: 0, confidence: 0, direction: 'long', expectedMove: 0, timeframe: 0 };
      
      // –£—Å–ª–æ–≤–∏–µ 2: –ú–æ—â–Ω—ã–π –æ–±—ä–µ–º–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫ (—É–∂–µ—Å—Ç–æ—á–µ–Ω–æ)
      if (volumeSpike >= this.MIN_VOLUME_SPIKE) confidence += 0.3;
      else if (volumeSpike >= 4.0) confidence += 0.2;
      else return { strength: 0, confidence: 0, direction: 'long', expectedMove: 0, timeframe: 0 };
      
      // –£—Å–ª–æ–≤–∏–µ 3: –ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
      if (consecutiveMoves >= this.MIN_CONSECUTIVE_MOVES) confidence += 0.25;
      else return { strength: 0, confidence: 0, direction: 'long', expectedMove: 0, timeframe: 0 };
      
      // –£—Å–ª–æ–≤–∏–µ 4: –ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏–º–ø—É–ª—å—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ confidence)
      if (recentMomentum > 0.02) confidence += 0.15;
      else if (recentMomentum > 0.015) confidence += 0.1;
      else confidence += 0.05;
      
      // –°–£–ü–ï–†-–ë–û–ù–£–°–´ –∑–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
      if (strength >= 0.04 && volumeSpike >= 10) confidence += 0.1; // –ú–µ–≥–∞-–ø–∞–º–ø
      if (consecutiveMoves === 5 && volumeSpike >= 8) confidence += 0.05; // –ò–¥–µ–∞–ª—å–Ω–∞—è –≤–æ–ª–Ω–∞
      if (strength >= 0.035 && recentMomentum > 0.025) confidence += 0.05; // –£—Å–∫–æ—Ä–µ–Ω–∏–µ
      
      return {
        strength,
        confidence: Math.min(confidence, 1.0),
        direction: priceMove > 0 ? 'long' : 'short',
        expectedMove: strength * 1.5,
        timeframe: 180 // 3 –º–∏–Ω—É—Ç—ã
      };
      
    } catch (error: any) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ - —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
      const isNetworkError = error.code === 'ECONNRESET' || 
                             error.code === 'ETIMEDOUT' || 
                             error.code === 'EHOSTUNREACH' ||
                             error.message?.includes('read ETIMEDOUT') ||
                             error.message?.includes('read ECONNRESET') ||
                             error.message?.includes('read EHOSTUNREACH');
      
      if (isNetworkError) {
        // –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ - —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        logger.debug(`üåê –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${symbol}: ${error.message}`);
      } else {
        // –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è ${symbol}: ${error.message}`);
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–∏–≥–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
      return { strength: 0, confidence: 0, direction: 'long', expectedMove: 0, timeframe: 0 };
    }
  }
  
  private async executeEliteTrade(best: { symbol: string; signal: PumpSignal }): Promise<void> {
    try {
      const { symbol, signal } = best;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
      const currentPrice = await this.exchangeService.getCurrentPrice(symbol);
      
      // –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú –ê–î–ê–ü–¢–ò–í–ù–û–ï –ü–õ–ï–ß–û –ù–ê –û–°–ù–û–í–ï –ö–ê–ß–ï–°–¢–í–ê –°–ò–ì–ù–ê–õ–ê
      const optimalLeverage = this.calculateOptimalLeverage(signal);
      
      // –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ê–ó–ú–ï–† –ü–û–ó–ò–¶–ò–ò —Å —É—á–µ—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ –ò –°–õ–û–ñ–ù–û–ì–û –ü–†–û–¶–ï–ù–¢–ê
      let adaptivePositionSize = this.calculateOptimalPositionSize(signal.confidence);
      
      // –°–£–ü–ï–†-–ê–ì–†–ï–°–°–ò–í–ù–´–ô –†–ï–ñ–ò–ú –¥–ª—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
      if (this.shouldUseAggressiveMode(signal)) {
        adaptivePositionSize *= 1.8; // +80% –∫ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏
        logger.info(`‚ö°‚ö° –°–£–ü–ï–†-–ê–ì–†–ï–°–°–ò–í–ù–´–ô –†–ï–ñ–ò–ú: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 80% –¥–ª—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞!`);
      }
      
      const positionValue = this.equity * adaptivePositionSize;
      const leveragedValue = positionValue * optimalLeverage;
      const quantity = leveragedValue / currentPrice;
      
      // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï TP/SL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
      const dynamicTP = this.TARGET_PROFIT * (1 + signal.strength * 2); // –ë–æ–ª—å—à–µ —Å–∏–ª–∞ = –±–æ–ª—å—à–µ —Ü–µ–ª—å
      const dynamicSL = this.STOP_LOSS * (2 - signal.confidence); // –ë–æ–ª—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ = –º–µ–Ω—å—à–µ —Å—Ç–æ–ø
      
      this.openPosition = {
        symbol,
        side: signal.direction,
        entryPrice: currentPrice,
        quantity,
        entryTime: Date.now(),
        targetProfit: dynamicTP,
        stopLoss: dynamicSL,
        positionValue,
        leverage: optimalLeverage
      };
      
      this.lastTradeTime = Date.now();
      this.symbolLastTrade.set(symbol, Date.now()); // –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
      this.dailyStats.trades++;
      
      logger.info(`üöÄüöÄ –≠–õ–ò–¢–ù–ê–Ø –°–î–ï–õ–ö–ê –û–¢–ö–†–´–¢–ê (–ê–î–ê–ü–¢–ò–í–ù–´–ï –ü–õ–ï–ß–û + –ü–û–ó–ò–¶–ò–Ø):`);
      logger.info(`   ${symbol} ${signal.direction.toUpperCase()}`);
      logger.info(`   –¶–µ–Ω–∞: ${currentPrice.toFixed(2)}`);
      logger.info(`   –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${positionValue.toFixed(2)} USDT (${(adaptivePositionSize * 100).toFixed(1)}%)`);
      logger.info(`   –ê–î–ê–ü–¢–ò–í–ù–û–ï –ü–õ–ï–ß–û: ${optimalLeverage}x`);
      logger.info(`   –ü–æ–∫—Ä—ã—Ç–∏–µ: ${leveragedValue.toFixed(2)} USDT`);
      logger.info(`   Confidence: ${(signal.confidence * 100).toFixed(1)}% ‚Üí –ü–ª–µ—á–æ: ${optimalLeverage}x, –ü–æ–∑–∏—Ü–∏—è: ${(adaptivePositionSize * 100).toFixed(1)}%`);
      logger.info(`   Target: ${(dynamicTP * 100).toFixed(2)}% | Stop: ${(dynamicSL * 100).toFixed(2)}%`);
      logger.info(`   üìä –°–¥–µ–ª–∫–∞ ${this.dailyStats.trades}/${this.MAX_DAILY_TRADES} –∑–∞ —Å–µ–≥–æ–¥–Ω—è`);
      
    } catch (error: any) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —ç–ª–∏—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏: ${error.message}`);
    }
  }
  
  private async manageElitePosition(): Promise<void> {
    if (!this.openPosition) return;
    
    const pos = this.openPosition;
    const currentPrice = await this.exchangeService.getCurrentPrice(pos.symbol);
    const elapsedTime = Date.now() - pos.entryTime;
    
    // –†–∞—Å—á–µ—Ç PnL
    let pnl = 0;
    if (pos.side === 'long') {
      pnl = (currentPrice - pos.entryPrice) / pos.entryPrice;
    } else {
      pnl = (pos.entryPrice - currentPrice) / pos.entryPrice;
    }
    
    const leveragedPnL = pnl * pos.leverage;
    const pnlUSDT = leveragedPnL * pos.positionValue;
    
    // –ü–†–û–í–ï–†–Ø–ï–ú –ß–ê–°–¢–ò–ß–ù–£–Æ –§–ò–ö–°–ê–¶–ò–Æ –ü–†–ò–ë–´–õ–ò
    if (pnl > 0) {
      const partialClosed = await this.checkPartialProfits(pos, pnl, currentPrice);
      if (partialClosed) return; // –ï—Å–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã–ª–∏, –≤—ã—Ö–æ–¥–∏–º
    }
    
    // –£–ú–ù–´–ï –£–°–õ–û–í–ò–Ø –ó–ê–ö–†–´–¢–ò–Ø
    let shouldClose = false;
    let reason = '';
    
    // 1. –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å
    if (pnl >= pos.targetProfit) {
      shouldClose = true;
      reason = `üéØ TARGET HIT: ${(pnl * 100).toFixed(2)}%`;
    }
    
    // 2. –°—Ç–æ–ø-–ª–æ—Å—Å
    else if (pnl <= -pos.stopLoss) {
      shouldClose = true;
      reason = `üõë STOP LOSS: ${(pnl * 100).toFixed(2)}%`;
    }
    
    // 3. –¢–∞–π–º–∞—É—Ç
    else if (elapsedTime > this.MAX_POSITION_TIME) {
      shouldClose = true;
      reason = `‚è∞ TIMEOUT: ${Math.round(elapsedTime/60000)}–º–∏–Ω`;
    }
    
    // 4. –£–ú–ù–´–ô –¢–†–ï–ô–õ–ò–ù–ì –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
    else if (pnl >= pos.targetProfit * 0.6) {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç –∏ –æ–±—ä–µ–º
      const currentSignal = await this.analyzeUltimateSignal(pos.symbol);
      const ticker24hr = await this.exchangeService.getTicker24hr(pos.symbol);
      const currentVolume = parseFloat(ticker24hr.volume);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –æ–±—ä–µ–º –ø–∞–¥–∞–µ—Ç –ò –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
      if (currentSignal.direction !== pos.side && 
          currentSignal.confidence > 0.25 && 
          currentVolume < parseFloat(ticker24hr.volume) * 0.7) {
        shouldClose = true;
        reason = `üìâ SMART TRAILING: –†–∞–∑–≤–æ—Ä–æ—Ç + –ø–∞–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–∞`;
      }
    }
    
    // 5. –ó–ê–©–ò–¢–ê –û–¢ –†–ï–ó–ö–ò–• –î–í–ò–ñ–ï–ù–ò–ô –ü–†–û–¢–ò–í –ù–ê–°
    else if (pnl <= -pos.stopLoss * 0.7) {
      // –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –µ—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å —É—Å–∫–æ—Ä—è–µ—Ç—Å—è
      const recentSignal = await this.analyzeUltimateSignal(pos.symbol);
      if (recentSignal.direction !== pos.side && recentSignal.confidence > 0.5) {
        shouldClose = true;
        reason = `‚ö° FAST EXIT: –°–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤`;
      }
    }
    
    if (shouldClose) {
      await this.closeElitePosition(pnl > 0 ? 'win' : 'loss', leveragedPnL, reason);
    } else {
      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      if (elapsedTime % 30000 < 3000) {
        logger.info(`üìä ${pos.symbol}: ${(leveragedPnL * 100).toFixed(2)}% (${pnlUSDT.toFixed(2)}$) - ${Math.round(elapsedTime/1000)}—Å`);
      }
    }
    
    // –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê PARTIAL PROFITS
    await this.checkPartialProfits(pos, pnl, currentPrice);
  }
  
  private async closeElitePosition(outcome: 'win' | 'loss', leveragedPnL: number, reason: string): Promise<void> {
    if (!this.openPosition) return;
    
    const pos = this.openPosition;
    const pnlUSDT = leveragedPnL * pos.positionValue;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª (–°–õ–û–ñ–ù–´–ô –ü–†–û–¶–ï–ù–¢)
    this.equity += pnlUSDT;
    this.dailyStats.totalPnL += pnlUSDT;
    
    if (outcome === 'win') {
      this.dailyStats.wins++;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    this.updateBotState(pnlUSDT);
    
    const winRate = this.dailyStats.trades > 0 ? (this.dailyStats.wins / this.dailyStats.trades * 100) : 0;
    const totalReturn = ((this.equity - this.initialEquity) / this.initialEquity * 100);
    
    logger.info(`üèÅ –≠–õ–ò–¢–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê:`);
    logger.info(`   ${pos.symbol} ${pos.side.toUpperCase()}: ${outcome.toUpperCase()}`);
    logger.info(`   PnL: ${(leveragedPnL * 100).toFixed(2)}% (${pnlUSDT.toFixed(2)} USDT)`);
    logger.info(`   –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    logger.info(`   üí∞ –ù–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${this.equity.toFixed(2)} USDT`);
    logger.info(`   üìä –°–µ–≥–æ–¥–Ω—è: ${this.dailyStats.trades} —Å–¥–µ–ª–æ–∫, WinRate: ${winRate.toFixed(1)}%`);
    logger.info(`   üöÄ –û–ë–©–ò–ô –†–û–°–¢: ${totalReturn.toFixed(1)}% –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞`);
    
    if (outcome === 'win' && this.consecutiveWins >= 3) {
      logger.info(`   üî• –°–ï–†–ò–Ø –ü–û–ë–ï–î: ${this.consecutiveWins} –ø–æ–¥—Ä—è–¥!`);
    }
    
    this.openPosition = null;
  }
  
  // üéØ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –ê–î–ê–ü–¢–ò–í–ù–´–ô –†–ê–°–ß–ï–¢ –†–ê–ó–ú–ï–†–ê –ü–û–ó–ò–¶–ò–ò
  private calculateOptimalPositionSize(confidence: number): number {
    // –ë–ê–ó–û–í–û–ï –ê–î–ê–ü–¢–ò–í–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ù–ê –û–°–ù–û–í–ï –ö–ê–ß–ï–°–¢–í–ê –°–ò–ì–ù–ê–õ–ê
    let baseSize: number;
    
    if (confidence >= 0.96) {
      baseSize = 0.18;  // 18% –¥–ª—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (96%+)
      logger.info(`üî• –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ: ${(confidence * 100).toFixed(1)}% - –ø–æ–∑–∏—Ü–∏—è 18%`);
    } else if (confidence >= 0.93) {
      baseSize = 0.12;  // 12% –¥–ª—è –æ—Ç–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (93-96%)
      logger.info(`‚≠ê –û–¢–õ–ò–ß–ù–´–ô –°–ò–ì–ù–ê–õ: ${(confidence * 100).toFixed(1)}% - –ø–æ–∑–∏—Ü–∏—è 12%`);
    } else if (confidence >= 0.90) {
      baseSize = 0.08;  // 8% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (90-93%)
      logger.info(`‚úÖ –•–û–†–û–®–ò–ô –°–ò–ì–ù–ê–õ: ${(confidence * 100).toFixed(1)}% - –ø–æ–∑–∏—Ü–∏—è 8%`);
    } else {
      baseSize = 0.04;  // 4% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (88-90%)
      logger.info(`‚ö†Ô∏è –°–õ–ê–ë–´–ô –°–ò–ì–ù–ê–õ: ${(confidence * 100).toFixed(1)}% - –ø–æ–∑–∏—Ü–∏—è 4%`);
    }
    
    // 1. –°–õ–û–ñ–ù–´–ô –ü–†–û–¶–ï–ù–¢ - –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–æ—Å—Ç–æ–º –∫–∞–ø–∏—Ç–∞–ª–∞
    const growthMultiplier = this.equity / this.initialEquity;
    if (growthMultiplier >= this.COMPOUND_THRESHOLD) {
      // –ü—Ä–∏ —Ä–æ—Å—Ç–µ –∫–∞–ø–∏—Ç–∞–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
      const compoundBonus = Math.min(growthMultiplier * 0.08, 0.05); // –ú–∞–∫—Å–∏–º—É–º +5% –∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
      baseSize += compoundBonus;
      
      logger.info(`üìà –°–õ–û–ñ–ù–´–ô –ü–†–û–¶–ï–ù–¢: –†–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ ${(growthMultiplier * 100).toFixed(1)}%, –±–æ–Ω—É—Å –∫ –ø–æ–∑–∏—Ü–∏–∏: +${(compoundBonus * 100).toFixed(1)}%`);
    }
    
    // 2. –°–ï–†–ò–ò –ü–û–ë–ï–î/–ü–û–†–ê–ñ–ï–ù–ò–ô - –£–°–ò–õ–ï–ù–ù–´–ï –ë–û–ù–£–°–´
    if (this.consecutiveWins >= 3) {
      const hotStreakBonus = Math.min(this.consecutiveWins * 0.015, 0.04); // –î–æ +4% –∑–∞ —Å–µ—Ä–∏—é
      baseSize += hotStreakBonus;
      logger.info(`üî• HOT STREAK: ${this.consecutiveWins} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥, –±–æ–Ω—É—Å: +${(hotStreakBonus * 100).toFixed(1)}%`);
    } else if (this.consecutiveLosses >= 2) {
      const coldStreakPenalty = Math.min(this.consecutiveLosses * 0.01, 0.025); // –î–æ -2.5%
      baseSize -= coldStreakPenalty;
      logger.info(`‚ùÑÔ∏è COLD STREAK: ${this.consecutiveLosses} –ø–æ—Ç–µ—Ä—å –ø–æ–¥—Ä—è–¥, —Å–Ω–∏–∂–µ–Ω–∏–µ: -${(coldStreakPenalty * 100).toFixed(1)}%`);
    }
    
    // 3. –†–´–ù–û–ß–ù–´–ï –£–°–õ–û–í–ò–Ø –ò –û–ë–™–ï–ú
    if (confidence >= 0.94) {
      // –î–ª—è —Å—É–ø–µ—Ä-—Å–∏–≥–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–º–Ω—ã–π –±–æ–Ω—É—Å
      baseSize += 0.02; // +2% –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
      logger.info(`üíé PREMIUM QUALITY: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å +2% –¥–ª—è exceptional —Å–∏–≥–Ω–∞–ª–∞`);
    }
    
    // 4. –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú –ø—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ - –°–¢–†–û–ñ–ï
    if (this.isConservativeMode) {
      baseSize *= 0.5; // –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ 50% –ø—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ
      logger.info(`üõ°Ô∏è –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú: –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 50%`);
    }
    
    // 5. –î–ù–ï–í–ù–û–ô –í–ò–ù–†–ï–ô–¢ - –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê
    const currentWinRate = this.dailyStats.trades > 2 ? this.dailyStats.wins / this.dailyStats.trades : 0.7;
    if (currentWinRate < 0.5) {
      baseSize *= 0.6; // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –ø—Ä–∏ –ø–ª–æ—Ö–æ–º –¥–Ω–µ
      logger.info(`‚ö†Ô∏è –ù–ò–ó–ö–ò–ô –í–ò–ù–†–ï–ô–¢: ${(currentWinRate * 100).toFixed(1)}% - —Å–Ω–∏–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 40%`);
    } else if (currentWinRate > 0.85) {
      baseSize *= 1.15; // –ß—É—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ –ø—Ä–∏ –æ—Ç–ª–∏—á–Ω–æ–º –¥–Ω–µ
      logger.info(`üöÄ –í–´–°–û–ö–ò–ô –í–ò–ù–†–ï–ô–¢: ${(currentWinRate * 100).toFixed(1)}% - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 15%`);
    }
    
    // 6. –ó–ê–©–ò–¢–ù–´–ï –õ–ò–ú–ò–¢–´
    const maxSize = this.equity > this.initialEquity * 3 ? 0.22 : 0.18; // –ú–∞–∫—Å–∏–º—É–º 18-22%
    const minSize = this.isConservativeMode ? 0.02 : 0.03; // –ú–∏–Ω–∏–º—É–º 2-3%
    
    const finalSize = Math.min(Math.max(baseSize, minSize), maxSize);
    
    // üõ°Ô∏è –§–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
    const protectedSize = this.shouldReducePositionSize(finalSize);
    
    logger.info(`üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø: ${(protectedSize * 100).toFixed(1)}% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ (${(protectedSize * this.equity).toFixed(2)} USDT)`);
    
    return protectedSize;
  }
  
  // üöÄ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –†–ê–°–ß–ï–¢ –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –ü–õ–ï–ß–ê
  private calculateOptimalLeverage(signal: PumpSignal): number {
    const { confidence, strength } = signal;
    let optimalLeverage = this.BASE_LEVERAGE;
    
    // –ë–ê–ó–û–í–û–ï –ü–õ–ï–ß–û –ù–ê –û–°–ù–û–í–ï CONFIDENCE
    if (confidence >= this.ULTRA_CONFIDENCE_THRESHOLD) {
      optimalLeverage = this.ULTRA_LEVERAGE; // 250x –¥–ª—è 97%+ —Å–∏–≥–Ω–∞–ª–æ–≤
      logger.info(`üî•üî• ULTRA LEVERAGE: ${confidence*100}% confidence ‚Üí ${optimalLeverage}x –ø–ª–µ—á–æ`);
    } else if (confidence >= this.HIGH_CONFIDENCE_THRESHOLD) {
      // 150x-200x –¥–ª—è 94-97% —Å–∏–≥–Ω–∞–ª–æ–≤
      optimalLeverage = 150 + (confidence - this.HIGH_CONFIDENCE_THRESHOLD) * 1667; // Linear interpolation
      logger.info(`‚ö° HIGH LEVERAGE: ${confidence*100}% confidence ‚Üí ${optimalLeverage.toFixed(0)}x –ø–ª–µ—á–æ`);
    } else if (confidence >= this.GOOD_CONFIDENCE_THRESHOLD) {
      // 75x-150x –¥–ª—è 90-94% —Å–∏–≥–Ω–∞–ª–æ–≤  
      optimalLeverage = 75 + (confidence - this.GOOD_CONFIDENCE_THRESHOLD) * 1875;
      logger.info(`‚úÖ GOOD LEVERAGE: ${confidence*100}% confidence ‚Üí ${optimalLeverage.toFixed(0)}x –ø–ª–µ—á–æ`);
    } else {
      // 20x-75x –¥–ª—è 88-90% —Å–∏–≥–Ω–∞–ª–æ–≤
      optimalLeverage = this.MIN_LEVERAGE + (confidence - this.MIN_CONFIDENCE_THRESHOLD) * 2750;
      logger.info(`‚ö†Ô∏è SAFE LEVERAGE: ${confidence*100}% confidence ‚Üí ${optimalLeverage.toFixed(0)}x –ø–ª–µ—á–æ`);
    }
    
    // –ë–û–ù–£–°–´ –ó–ê –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø
    
    // 1. –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—É –¥–≤–∏–∂–µ–Ω–∏—è
    if (strength >= 0.05) {
      optimalLeverage *= 1.3; // +30% –∑–∞ –º–æ—â–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
      logger.info(`üí™ STRENGTH BONUS: +30% –ø–ª–µ—á–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ ${(strength*100).toFixed(1)}%`);
    } else if (strength >= 0.035) {
      optimalLeverage *= 1.15; // +15% –∑–∞ —Ö–æ—Ä–æ—à–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
      logger.info(`üí™ STRENGTH BONUS: +15% –ø–ª–µ—á–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ ${(strength*100).toFixed(1)}%`);
    }
    
    // 2. –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é –ø–æ–±–µ–¥
    if (this.consecutiveWins >= 5) {
      optimalLeverage *= 1.4; // +40% –∑–∞ –≥–æ—Ä—è—á—É—é —Å–µ—Ä–∏—é
      logger.info(`üî• HOT STREAK BONUS: +40% –ø–ª–µ—á–∞ –∑–∞ ${this.consecutiveWins} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥!`);
    } else if (this.consecutiveWins >= 3) {
      optimalLeverage *= 1.2; // +20% –∑–∞ —Ö–æ—Ä–æ—à—É—é —Å–µ—Ä–∏—é
      logger.info(`üî• WIN STREAK BONUS: +20% –ø–ª–µ—á–∞ –∑–∞ ${this.consecutiveWins} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥`);
    }
    
    // 3. –ë–æ–Ω—É—Å –∑–∞ —Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ (compound effect)
    const growthMultiplier = this.equity / this.initialEquity;
    if (growthMultiplier >= 3.0) {
      optimalLeverage *= 1.25; // +25% –ø—Ä–∏ —Ä–æ—Å—Ç–µ –∫–∞–ø–∏—Ç–∞–ª–∞ –≤ 3 —Ä–∞–∑–∞
      logger.info(`üìà COMPOUND BONUS: +25% –ø–ª–µ—á–∞ –∑–∞ —Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –≤ ${growthMultiplier.toFixed(1)} —Ä–∞–∑`);
    } else if (growthMultiplier >= 2.0) {
      optimalLeverage *= 1.15; // +15% –ø—Ä–∏ —É–¥–≤–æ–µ–Ω–∏–∏ –∫–∞–ø–∏—Ç–∞–ª–∞
      logger.info(`üìà GROWTH BONUS: +15% –ø–ª–µ—á–∞ –∑–∞ —Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –≤ ${growthMultiplier.toFixed(1)} —Ä–∞–∑`);
    }
    
    // –®–¢–†–ê–§–´ –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
    
    // 1. –®—Ç—Ä–∞—Ñ –∑–∞ —Å–µ—Ä–∏—é –ø–æ—Ç–µ—Ä—å
    if (this.consecutiveLosses >= 3) {
      optimalLeverage *= 0.4; // -60% –∑–∞ —Å–µ—Ä–∏—é –ø–æ—Ç–µ—Ä—å
      logger.warn(`‚ùÑÔ∏è COLD STREAK PENALTY: -60% –ø–ª–µ—á–∞ –∑–∞ ${this.consecutiveLosses} –ø–æ—Ç–µ—Ä—å –ø–æ–¥—Ä—è–¥`);
    } else if (this.consecutiveLosses >= 2) {
      optimalLeverage *= 0.7; // -30% –∑–∞ –ø–∞—Ä—É –ø–æ—Ç–µ—Ä—å
      logger.warn(`‚ùÑÔ∏è LOSS PENALTY: -30% –ø–ª–µ—á–∞ –∑–∞ ${this.consecutiveLosses} –ø–æ—Ç–µ—Ä–∏ –ø–æ–¥—Ä—è–¥`);
    }
    
    // 2. –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ
    if (this.isConservativeMode) {
      optimalLeverage *= 0.5; // -50% –≤ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
      logger.warn(`üõ°Ô∏è CONSERVATIVE MODE: -50% –ø–ª–µ—á–∞ –∏–∑-–∑–∞ –ø—Ä–æ—Å–∞–¥–∫–∏`);
    }
    
    // 3. –ó–∞—â–∏—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –ø–æ—Ç–µ—Ä—è—Ö
    if (this.protectiveMode) {
      optimalLeverage = Math.min(optimalLeverage, 25); // –ú–∞–∫—Å–∏–º—É–º 25x –≤ –∑–∞—â–∏—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
      logger.warn(`üö® PROTECTIVE MODE: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–ª–µ—á–∞ –¥–æ 25x`);
    }
    
    // 4. –ù–∏–∑–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π –≤–∏–Ω—Ä–µ–π—Ç
    const dayWinRate = this.dailyStats.trades > 0 ? this.dailyStats.wins / this.dailyStats.trades : 1;
    if (dayWinRate < 0.5) {
      optimalLeverage *= 0.6; // -40% –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –≤–∏–Ω—Ä–µ–π—Ç–µ
      logger.warn(`üìâ LOW WINRATE PENALTY: -40% –ø–ª–µ—á–∞ –ø—Ä–∏ –≤–∏–Ω—Ä–µ–π—Ç–µ ${(dayWinRate*100).toFixed(1)}%`);
    }
    
    // –§–ò–ù–ê–õ–¨–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
    const finalLeverage = Math.min(Math.max(optimalLeverage, this.MIN_LEVERAGE), this.ULTRA_LEVERAGE);
    
    logger.info(`üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –ü–õ–ï–ß–û: ${finalLeverage.toFixed(0)}x (${(finalLeverage/this.BASE_LEVERAGE).toFixed(1)}x –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ)`);
    
    return Math.round(finalLeverage);
  }
  
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú –ë–û–¢–ê
  private updateBotState(pnlUSDT: number): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª
    if (this.equity > this.dailyPeakEquity) {
      this.dailyPeakEquity = this.equity;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å–∞–¥–∫—É –¥–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const drawdown = (this.dailyPeakEquity - this.equity) / this.dailyPeakEquity;
    this.isConservativeMode = drawdown >= this.CONSERVATIVE_MODE_TRIGGER;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π
    if (pnlUSDT > 0) {
      this.consecutiveWins++;
      this.consecutiveLosses = 0;
    } else {
      this.consecutiveLosses++;
      this.consecutiveWins = 0;
    }
    
    if (this.isConservativeMode) {
      logger.warn(`‚ö†Ô∏è –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù: –ü—Ä–æ—Å–∞–¥–∫–∞ ${(drawdown * 100).toFixed(1)}%`);
    }
  }
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  public getUltimateStats() {
    const winRate = this.dailyStats.trades > 0 ? (this.dailyStats.wins / this.dailyStats.trades) : 0;
    const totalReturn = ((this.equity - this.initialEquity) / this.initialEquity) * 100;
    const dailyReturn = ((this.equity - this.initialEquity) / this.initialEquity) * 100;
    const growthMultiplier = this.equity / this.initialEquity;
    const drawdown = this.dailyPeakEquity > 0 ? ((this.dailyPeakEquity - this.equity) / this.dailyPeakEquity) * 100 : 0;
    const dayLossPercent = Math.abs(this.dailyStats.totalPnL) / this.equity * 100;
    
    return {
      equity: this.equity,
      initialEquity: this.initialEquity,
      totalReturn: totalReturn,
      dailyPnL: this.dailyStats.totalPnL,
      totalTrades: this.dailyStats.trades,
      winRate: winRate,
      dailyReturn: dailyReturn,
      openPosition: this.openPosition ? 1 : 0,
      leverage: this.BASE_LEVERAGE, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø–ª–µ—á–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
      nextTradeIn: Math.max(0, this.COOLDOWN_TIME - (Date.now() - this.lastTradeTime)),
      // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫–∏
      growthMultiplier: growthMultiplier,
      isConservativeMode: this.isConservativeMode,
      isProtectiveMode: this.protectiveMode,
      consecutiveWins: this.consecutiveWins,
      consecutiveLosses: this.consecutiveLosses,
      currentDrawdown: drawdown,
      dayLossPercent: dayLossPercent,
      positionSizeRange: `${this.MIN_POSITION_SIZE * 100}%-${this.MAX_POSITION_SIZE * 100}%`,
      compoundActive: growthMultiplier >= this.COMPOUND_THRESHOLD,
      adaptiveSystemActive: true
    };
  }
  
  public resetDaily(): void {
    this.dailyStats = { trades: 0, wins: 0, totalPnL: 0 };
    this.symbolLastTrade.clear(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    this.dailyPeakEquity = this.equity; // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª
    this.consecutiveWins = 0;
    this.consecutiveLosses = 0;
    this.protectiveMode = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞—â–∏—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    this.dayMaxLoss = 0;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –∫–∞–ø–∏—Ç–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
    if (this.equity >= this.dailyPeakEquity * 0.9) {
      this.isConservativeMode = false;
    }
    
    logger.info('üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
    logger.info(`üí∞ –¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${this.equity.toFixed(2)} USDT`);
    logger.info(`üöÄ –û–±—â–∏–π —Ä–æ—Å—Ç: ${(((this.equity - this.initialEquity) / this.initialEquity) * 100).toFixed(1)}%`);
    logger.info(`‚ö° –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ì–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–º—É –¥–Ω—é —Ç–æ—Ä–≥–æ–≤–ª–∏!`);
  }
  
  // –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê PARTIAL PROFITS
  private async checkPartialProfits(pos: Position, pnl: number, currentPrice: number): Promise<boolean> {
    if (pnl <= 0) return false;
    
    const targetReached = pnl / pos.targetProfit;
    
    // –ß–ê–°–¢–ò–ß–ù–ê–Ø –§–ò–ö–°–ê–¶–ò–û–ù–ê –ü–†–ò–ë–´–õ–ò –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    if (targetReached >= 0.6 && targetReached < 0.8) {
      // –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 60% —Ü–µ–ª–∏ - —Ñ–∏–∫—Å–∏—Ä—É–µ–º 30% –ø–æ–∑–∏—Ü–∏–∏
      const partialProfit = pos.positionValue * 0.3 * pnl * pos.leverage;
      this.equity += partialProfit;
      
      logger.info(`üíé PARTIAL PROFIT: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ 30% –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ ${(pnl * 100).toFixed(2)}%`);
      logger.info(`   üí∞ –ü—Ä–∏–±—ã–ª—å: +${partialProfit.toFixed(2)} USDT`);
      
      // –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∫ –±–µ–∑—É–±—ã—Ç–∫—É
      pos.stopLoss = Math.min(pos.stopLoss, 0.005); // –ú–∞–∫—Å–∏–º—É–º 0.5% —Ä–∏—Å–∫
      
      return false; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ—Ä–∂–∞—Ç—å –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–∑–∏—Ü–∏—é
    }
    
    if (targetReached >= 0.8 && targetReached < 1.2) {
      // –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 80% —Ü–µ–ª–∏ - —Ñ–∏–∫—Å–∏—Ä—É–µ–º –µ—â–µ 40% –ø–æ–∑–∏—Ü–∏–∏
      const partialProfit = pos.positionValue * 0.4 * pnl * pos.leverage;
      this.equity += partialProfit;
      
      logger.info(`üíéüíé SECOND PARTIAL: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –µ—â–µ 40% –ø–æ–∑–∏—Ü–∏–∏`);
      logger.info(`   üí∞ –ü—Ä–∏–±—ã–ª—å: +${partialProfit.toFixed(2)} USDT`);
      
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—Ç–æ–ø –≤ –ø—Ä–∏–±—ã–ª—å
      pos.stopLoss = -0.01; // 1% –ø—Ä–∏–±—ã–ª—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω
      
      return false; // –î–µ—Ä–∂–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30% –¥–ª—è –º–∞–∫—Å–∏–º—É–º–∞
    }
    
    return false;
  }
  
  // –°–£–ü–ï–†-–ê–ì–†–ï–°–°–ò–í–ù–´–ô –†–ï–ñ–ò–ú –¥–ª—è exceptional —Å–∏–≥–Ω–∞–ª–æ–≤
  private shouldUseAggressiveMode(signal: PumpSignal): boolean {
    return (
      signal.confidence >= 0.95 &&
      signal.strength >= 0.04 &&
      this.consecutiveWins >= 2 &&
      !this.isConservativeMode &&
      this.dailyStats.trades < this.MAX_DAILY_TRADES - 2 // –û—Å—Ç–∞–ª—Å—è –∑–∞–ø–∞—Å —Å–¥–µ–ª–æ–∫
    );
  }
  
  // üõ°Ô∏è –ó–ê–©–ò–¢–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –î–õ–Ø –ê–î–ê–ü–¢–ò–í–ù–´–• –ü–û–ó–ò–¶–ò–ô
  private protectiveMode = false;
  private dayMaxLoss = 0;
  private readonly MAX_DAILY_LOSS_PERCENT = 0.25; // 25% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è –ø–æ—Ç–µ—Ä—è
  
  // –ó–∞—â–∏—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –∫—Ä—É–ø–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
  private shouldReducePositionSize(requestedSize: number): number {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏
    const dayLossPercent = Math.abs(this.dailyStats.totalPnL) / this.equity;
    
    if (dayLossPercent > this.MAX_DAILY_LOSS_PERCENT) {
      this.protectiveMode = true;
      logger.warn(`üö® –ó–ê–©–ò–¢–ù–´–ô –†–ï–ñ–ò–ú: –î–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ ${(dayLossPercent * 100).toFixed(1)}% - –º–∞–∫—Å–∏–º—É–º 3% –ø–æ–∑–∏—Ü–∏–∏!`);
      return Math.min(requestedSize, 0.03);
    }
    
    // –ï—Å–ª–∏ –ø–æ–¥—Ä—è–¥ 3 —É–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    if (this.consecutiveLosses >= 3) {
      logger.warn(`‚ö†Ô∏è –û–°–¢–û–†–û–ñ–ù–û–°–¢–¨: ${this.consecutiveLosses} –ø–æ—Ç–µ—Ä—å –ø–æ–¥—Ä—è–¥ - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é`);
      return Math.min(requestedSize, 0.06);
    }
    
    return requestedSize;
  }
  
  // üîÑ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–û–¢–ê–¶–ò–ò –ü–ê–†
  private symbolPriority: Map<string, number> = new Map();
  private lastFullScan = 0;
  private readonly FULL_SCAN_INTERVAL = 2 * 60 * 1000; // –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
  private initializeSymbolPriorities(symbols: string[]): void {
    symbols.forEach((symbol, index) => {
      // –ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–ª—É—á–∞—é—Ç –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      const priority = index < 8 ? 1.0 : (index < 16 ? 0.8 : 0.6);
      this.symbolPriority.set(symbol, priority);
    });
  }
  
  // –£–º–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
  private getSmartSymbolsToScan(allSymbols: string[]): string[] {
    const now = Date.now();
    
    // –ö–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä
    if (now - this.lastFullScan > this.FULL_SCAN_INTERVAL) {
      this.lastFullScan = now;
      logger.info(`üîÑ –ü–û–õ–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ 24 –ø–∞—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞`);
      return allSymbols;
    }
    
    // –í –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö + —Ä–æ—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
    const highPriority = allSymbols.slice(0, 12); // –¢–æ–ø-12 –≤—Å–µ–≥–¥–∞
    const randomFromRest = allSymbols.slice(12).sort(() => Math.random() - 0.5).slice(0, 6); // 6 —Å–ª—É—á–∞–π–Ω—ã—Ö
    
    return [...highPriority, ...randomFromRest];
  }
}
