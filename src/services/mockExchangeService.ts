import { ExchangeService } from './exchangeService';
import logger from '../utils/logger';
import fs from 'fs';
import path from 'path';
import { format } from 'date-fns';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –±–∏—Ä–∂–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
 * –ù–∞—Å–ª–µ–¥—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∏—Ä–∂–µ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –Ω–æ –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é
 */
export class MockExchangeService extends ExchangeService {
  private balance: number = 100; // –ù–∞—á–∞–ª—å–Ω—ã–µ 100$
  private positions: Map<string, {
    symbol: string,
    side: 'buy' | 'sell',
    amount: number,
    entryPrice: number,
    leverage: number,
    timestamp: number,
    positionAmt: number,
    unrealizedPnl: number
  }> = new Map();
  
  private openOrders: Map<string, any> = new Map();
  private orderIdCounter: number = 1;
  private lastPrices: Map<string, number> = new Map();
  private logDir: string;
  private tradesLogFile: string;
  
  constructor(apiKey: string, apiSecret: string) {
    super(apiKey, apiSecret);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
    this.logDir = path.resolve(process.cwd(), 'logs');
    if (!fs.existsSync(this.logDir)) {
      fs.mkdirSync(this.logDir, { recursive: true });
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ —Å–¥–µ–ª–æ–∫
    const date = format(new Date(), 'yyyyMMdd');
    this.tradesLogFile = path.join(this.logDir, `test_trades_${date}.csv`);
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(this.tradesLogFile)) {
      fs.writeFileSync(this.tradesLogFile, 'timestamp,symbol,side,quantity,price,leverage,pnl,balance\n');
    }
    
    logger.info('üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º $100');
  }
  
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
  
  async getAccountInfo(): Promise<any> {
    // –≠–º—É–ª—è—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    return {
      totalWalletBalance: this.balance.toString(),
      totalUnrealizedProfit: Array.from(this.positions.values())
        .reduce((total, pos) => total + pos.unrealizedPnl, 0).toString(),
      positions: Array.from(this.positions.values())
    };
  }
  
  async getMarkPrice(symbol: string): Promise<number> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ WebSocket
    // –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
    const price = await super.getMarkPrice(symbol);
    this.lastPrices.set(symbol, price);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
    this.updatePositionPnL(symbol, price);
    
    return price;
  }
  
  private updatePositionPnL(symbol: string, currentPrice: number): void {
    const position = this.positions.get(symbol);
    if (!position) return;
    
    if (position.side === 'buy') { // Long position
      position.unrealizedPnl = (currentPrice - position.entryPrice) * position.amount * position.leverage;
    } else { // Short position
      position.unrealizedPnl = (position.entryPrice - currentPrice) * position.amount * position.leverage;
    }
  }
  
  async placeMarketOrder(params: any): Promise<any> {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    const price = this.lastPrices.get(params.symbol) || await this.getMarkPrice(params.symbol);
    const timestamp = Date.now();
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ä–¥–µ—Ä–∞
    const orderId = `test_${this.orderIdCounter++}`;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
    const leveragedValue = params.quantity * price;
    const positionValue = leveragedValue / params.leverage;
    
    // –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
    if (params.reduceOnly) {
      const position = this.positions.get(params.symbol);
      if (!position) {
        logger.warn(`–¢–ï–°–¢: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é ${params.symbol}`);
        return { id: orderId, price, quantity: params.quantity, side: params.side, status: 'REJECTED' };
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
      const pnl = position.unrealizedPnl;
      this.balance += pnl;
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      this.logTrade({
        timestamp,
        symbol: params.symbol,
        side: params.side,
        quantity: params.quantity,
        price,
        leverage: position.leverage,
        pnl,
        balance: this.balance
      });
      
      logger.info(`–¢–ï–°–¢: –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è ${params.symbol} ${position.side}, PnL: ${pnl.toFixed(2)}$, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${this.balance.toFixed(2)}$`);
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
      this.positions.delete(params.symbol);
      
      return {
        id: orderId,
        price,
        quantity: params.quantity,
        side: params.side,
        status: 'FILLED'
      };
    } 
    // –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
      if (this.positions.has(params.symbol)) {
        logger.warn(`–¢–ï–°–¢: –£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ ${params.symbol}, –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞`);
        return { id: orderId, price, quantity: params.quantity, side: params.side, status: 'REJECTED' };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ (—Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞)
      if (positionValue > this.balance) {
        logger.warn(`–¢–ï–°–¢: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏. –ù—É–∂–Ω–æ: ${positionValue.toFixed(2)}$, –¥–æ—Å—Ç—É–ø–Ω–æ: ${this.balance.toFixed(2)}$`);
        return { id: orderId, price, quantity: params.quantity, side: params.side, status: 'REJECTED' };
      }
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
      this.positions.set(params.symbol, {
        symbol: params.symbol,
        side: params.side,
        amount: params.quantity,
        entryPrice: price,
        leverage: params.leverage || 1,
        timestamp,
        positionAmt: params.quantity,
        unrealizedPnl: 0
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      this.logTrade({
        timestamp,
        symbol: params.symbol,
        side: params.side,
        quantity: params.quantity,
        price,
        leverage: params.leverage || 1,
        pnl: 0,
        balance: this.balance
      });
      
      logger.info(`–¢–ï–°–¢: –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è ${params.symbol} ${params.side} x${params.leverage || 1}, —Ü–µ–Ω–∞: ${price}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${params.quantity}`);
      
      return {
        id: orderId,
        price,
        quantity: params.quantity,
        side: params.side,
        status: 'FILLED',
        leverage: params.leverage
      };
    }
  }
  
  async getOpenPositions(): Promise<any[]> {
    return Array.from(this.positions.values());
  }
  
  async getPosition(symbol: string): Promise<any> {
    const position = this.positions.get(symbol);
    if (!position) return null;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º PnL –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    const currentPrice = this.lastPrices.get(symbol);
    if (currentPrice) {
      this.updatePositionPnL(symbol, currentPrice);
    }
    
    return position;
  }
  
  async cancelAllOrders(symbol: string): Promise<any> {
    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
    const orders = Array.from(this.openOrders.values())
      .filter(order => order.symbol === symbol);
      
    orders.forEach(order => this.openOrders.delete(order.id));
    
    logger.info(`–¢–ï–°–¢: –û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è ${symbol}`);
    return { status: 'success', message: `–û—Ç–º–µ–Ω–µ–Ω–æ ${orders.length} –æ—Ä–¥–µ—Ä–æ–≤` };
  }
  
  async setLeverage(symbol: string, leverage: number): Promise<any> {
    logger.info(`–¢–ï–°–¢: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–æ ${leverage}x –¥–ª—è ${symbol}`);
    return { leverage, symbol };
  }
  
  async placeStopOrder(params: any): Promise<any> {
    const orderId = `test_stop_${this.orderIdCounter++}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä
    const order = {
      id: orderId,
      symbol: params.symbol,
      side: params.side,
      quantity: params.quantity,
      stopPrice: params.stopPrice,
      type: 'STOP_MARKET',
      status: 'NEW',
      reduceOnly: params.reduceOnly
    };
    
    this.openOrders.set(orderId, order);
    logger.info(`–¢–ï–°–¢: –†–∞–∑–º–µ—â–µ–Ω —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä –¥–ª—è ${params.symbol}, —Ü–µ–Ω–∞ —Å—Ç–æ–ø–∞: ${params.stopPrice}`);
    
    return order;
  }
  
  async placeLimitOrder(params: any): Promise<any> {
    const orderId = `test_limit_${this.orderIdCounter++}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
    const order = {
      id: orderId,
      symbol: params.symbol,
      side: params.side,
      quantity: params.quantity,
      price: params.price,
      type: 'LIMIT',
      status: 'NEW',
      reduceOnly: params.reduceOnly
    };
    
    this.openOrders.set(orderId, order);
    logger.info(`–¢–ï–°–¢: –†–∞–∑–º–µ—â–µ–Ω –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è ${params.symbol}, —Ü–µ–Ω–∞: ${params.price}`);
    
    return order;
  }
  
  async cancelOrder(symbol: string, orderId: string): Promise<any> {
    if (this.openOrders.has(orderId)) {
      this.openOrders.delete(orderId);
      logger.info(`–¢–ï–°–¢: –û—Ç–º–µ–Ω–µ–Ω –æ—Ä–¥–µ—Ä ${orderId} –¥–ª—è ${symbol}`);
      return { status: 'success' };
    }
    return { status: 'error', message: '–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' };
  }
  
  async cancelOrderType(symbol: string, orderType: string): Promise<any> {
    const orders = Array.from(this.openOrders.values())
      .filter(order => order.symbol === symbol && order.type === orderType);
      
    orders.forEach(order => this.openOrders.delete(order.id));
    
    logger.info(`–¢–ï–°–¢: –û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ —Ç–∏–ø–∞ ${orderType} –¥–ª—è ${symbol}`);
    return { success: true, count: orders.length };
  }
  
  async getOpenOrders(symbol?: string): Promise<any[]> {
    let orders = Array.from(this.openOrders.values());
    
    if (symbol) {
      orders = orders.filter(order => order.symbol === symbol);
    }
    
    return orders;
  }
  
  private logTrade(trade: {
    timestamp: number;
    symbol: string;
    side: string;
    quantity: number;
    price: number;
    leverage: number;
    pnl: number;
    balance: number;
  }): void {
    const date = format(new Date(trade.timestamp), 'yyyy-MM-dd HH:mm:ss');
    
    const line = [
      date,
      trade.symbol,
      trade.side,
      trade.quantity.toFixed(5),
      trade.price.toFixed(2),
      trade.leverage,
      trade.pnl.toFixed(2),
      trade.balance.toFixed(2)
    ].join(',');
    
    fs.appendFileSync(this.tradesLogFile, line + '\n');
  }
}