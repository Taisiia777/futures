#!/usr/bin/env npx ts-node

/**
 * –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –î–ê–ù–ù–´–ú BINANCE
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º –∏ API endpoints
 */

import { ExchangeService } from './src/services/exchangeService';
import { config } from './src/config/config';
import logger from './src/utils/logger';

async function testBinanceAccess() {
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö BINANCE API');
    console.log('=====================================');
    
    try {
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        const exchangeService = new ExchangeService(config.binance.apiKey, config.binance.apiSecret);
        
        console.log('‚úÖ Exchange service —Å–æ–∑–¥–∞–Ω');
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        console.log('\nüìä –¢–ï–°–¢ 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ');
        try {
            const accountInfo = await exchangeService.getAccountInfo();
            console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: OK');
            console.log(`   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${accountInfo.totalWalletBalance} USDT`);
            console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: ${accountInfo.availableBalance} USDT`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            const positions = accountInfo.positions.filter((p: any) => Math.abs(parseFloat(p.positionAmt)) > 0);
            console.log(`   –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${positions.length}`);
            
        } catch (error: any) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É:', error.message);
        }
        
        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä—ã–Ω–æ—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π)
        console.log('\nüìà –¢–ï–°–¢ 2: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—É–±–ª–∏—á–Ω—ã–µ)');
        const testSymbols = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'BNBUSDT', 'ADAUSDT'];
        
        for (const symbol of testSymbols) {
            try {
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π (–ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                const klines = await exchangeService.getKlines(symbol, '1m', 5);
                console.log(`‚úÖ ${symbol}: –°–≤–µ—á–∏ –ø–æ–ª—É—á–µ–Ω—ã (${klines.length} –∑–∞–ø–∏—Å–µ–π)`);
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã (–ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                const price = await exchangeService.getCurrentPrice(symbol);
                console.log(`   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${price.toFixed(2)}`);
                
            } catch (error: any) {
                console.log(`‚ùå ${symbol}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - ${error.message}`);
            }
        }
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–∞—Ö
        console.log('\nüîß –¢–ï–°–¢ 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö');
        try {
            // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
            await new Promise(resolve => setTimeout(resolve, 2000)); // –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
            
            console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏
            const tradingTestSymbols = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT'];
            for (const symbol of tradingTestSymbols) {
                try {
                    const maxLeverage = await exchangeService.getMaxLeverage(symbol);
                    const pricePrecision = await exchangeService.getPricePrecision(symbol);
                    const quantityPrecision = await exchangeService.getQuantityPrecision(symbol);
                    
                    console.log(`‚úÖ ${symbol}:`);
                    console.log(`   –ú–∞–∫—Å. –ø–ª–µ—á–æ: ${maxLeverage}x`);
                    console.log(`   –¢–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã: ${pricePrecision}`);
                    console.log(`   –¢–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: ${quantityPrecision}`);
                    
                } catch (error: any) {
                    console.log(`‚ùå ${symbol}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - ${error.message}`);
                }
            }
            
        } catch (error: any) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö:', error.message);
        }
        
        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        console.log('\n‚öñÔ∏è –¢–ï–°–¢ 4: –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è');
        try {
            const openOrders = await exchangeService.getOpenOrders();
            console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –æ—Ç–∫—Ä—ã—Ç—ã–º –æ—Ä–¥–µ—Ä–∞–º: OK');
            console.log(`   –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${openOrders.length}`);
            
        } catch (error: any) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ—Ä–≥–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º:', error.message);
            if (error.message.includes('API-key format invalid')) {
                console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, API –∫–ª—é—á–∏ –Ω–µ–≤–µ—Ä–Ω—ã –∏–ª–∏ –Ω–µ –∏–º–µ—é—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π');
            }
        }
        
        // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é
        console.log('\nüö´ –¢–ï–°–¢ 5: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏');
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            const accountInfo = await exchangeService.getAccountInfo();
            
            console.log('üìã –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:');
            console.log(`   –¢–æ—Ä–≥–æ–≤–ª—è: ${accountInfo.canTrade ? '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∞' : '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–∞'}`);
            console.log(`   –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤: ${accountInfo.canWithdraw ? '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω' : '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω'}`);
            console.log(`   –î–µ–ø–æ–∑–∏—Ç: ${accountInfo.canDeposit ? '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω' : '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω'}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            const activeSymbols = accountInfo.positions
                .filter((p: any) => p.symbol.endsWith('USDT'))
                .map((p: any) => p.symbol);
            
            console.log(`\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–∏–º–≤–æ–ª—ã: ${activeSymbols.length}`);
            if (activeSymbols.length <= 10) {
                console.log('   –°–∏–º–≤–æ–ª—ã:', activeSymbols.join(', '));
            } else {
                console.log('   –ü–µ—Ä–≤—ã–µ 10:', activeSymbols.slice(0, 10).join(', '), '...');
            }
            
        } catch (error: any) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error.message);
        }
        
        console.log('\nüéâ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
        console.log('=====================================');
        
        // –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\nüí° –í–´–í–û–î–´:');
        console.log('1. –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–≤–µ—á–∏, —Ü–µ–Ω—ã) - —ç—Ç–æ –ü–£–ë–õ–ò–ß–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
        console.log('2. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ù–ï –ù–£–ñ–ù–´ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è');
        console.log('3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ 3 –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã –∫–∞—Å–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¢–û–†–ì–û–í–õ–ò');
        console.log('4. –ë–æ—Ç –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –í–°–ï —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–º–ø–æ–≤');
        console.log('5. –¢–æ—Ä–≥–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏');
        
    } catch (error: any) {
        console.log('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testBinanceAccess().catch(console.error);
